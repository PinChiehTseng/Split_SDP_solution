warning('on','all')
% This version contains the semidefinite constraints and euqation(25) in paper "New code upper bounds from the Terwilliger
% algebra and semidefinite programming" together with lemma 5 and lemma 7 in paper "Binary Codes with a Minimum Distance
% of Four".
% We also add theorem 7 in "Improved Semidefinite Programming Bound on
% Sizes of Codes", equation 18 and equation 19 with i = 1.
A_4 = [1, 1, 1, 2, 2, 4, 8, 16, 20, 40, 72, 144, 256, 512, 1024, 2048, 3276, 6552, 13104, 26168, 43688, 87333, 172361, 344308, 599184, 1198368, 2396736]; 
%A(n, 4), n <= 27
B_4_4 = [1, 1, 1, 0, 0]; B_5_4 = [1, 1, 1, 0, 0]; B_6_4 = [1, 1, 1, 4, 1]; B_7_4 = [4, 1, 1, 7, 1];
B_8_4 = [7, 4, 14, 8, 7]; B_9_4 = [8, 7, 18, 12, 8]; B_10_4 = [12, 8, 30, 13, 12]; B_11_4 = [13, 12, 35, 17, 13]; 
B_12_4 = [17, 13, 51, 20, 17]; B_13_4 = [20, 17, 65, 26, 20]; B_14_4 = [26, 20, 91, 28, 26]; 
B_15_4 = [28, 26, 105, 35, 28]; B_16_4 = [35, 28, 140, 37, 35]; 
B_17_4 = [37, 35, 157, 44, 37]; B_18_4 = [44, 37, 198, 48, 44]; B_19_4 = [48, 44, 228, 57, 47]; 
B_20_4 = [57, 48, 285, 60, 57]; B_21_4 = [60, 57, 315, 70, 60]; B_22_4 = [70, 60, 385, 73, 70]; 
B_23_4 = [73, 70, 419, 83, 73]; B_24_4 = [83, 73, 498, 88, 83]; B_25_4 = [88, 83, 550, 100, 88];
B_26_4 = [100, 88, 650, 104, 100]; B_27_4 = [104, 100, 702, 117, 104]; B_28_4 = [117, 104, 819, 121, 117];
%l = 5
cell_4 = {B_4_4, B_5_4, B_6_4, B_7_4, B_8_4, B_9_4, B_10_4, B_11_4, B_12_4, B_13_4, B_14_4, B_15_4, B_16_4, B_17_4, B_18_4, B_19_4, B_20_4, B_21_4, B_22_4, B_23_4, B_24_4, B_25_4, B_26_4, B_27_4, B_28_4};

A_6 = [1, 1, 1, 1, 1, 2, 2, 2, 4, 6, 12, 24, 32, 64, 128, 256, 340, 673, 1237, 2279, 4096, 6941, 13674, 24106, 47538, 84260, 157285];
%A(n, 6), n <= 27
B_6_6 = [1, 1, 1, 0, 0, 0, 0]; B_7_6 = [1, 1, 1, 0, 0, 0, 0];
B_8_6 = [1, 1, 1, 2, 1, 1, 1]; B_9_6 = [2, 1, 1, 3, 1, 1, 1];
B_10_6 = [3, 1, 1, 5, 2, 6, 1]; B_11_6 = [5, 2, 6, 6, 3, 11, 6]; 
B_12_6 = [6, 3, 11, 9, 5, 12, 11]; B_13_6 = [9, 5, 12, 13, 6, 18, 12]; 
B_14_6 = [13, 6, 18, 14, 9, 28, 18]; 
B_15_6 = [14, 9, 28, 15, 13, 42, 28]; 
B_16_6 = [15, 13, 42, 20, 14, 48, 42]; 
B_17_6 = [20, 14, 48, 20, 15, 68, 48]; 
B_18_6 = [20, 15, 68, 22, 20, 0, 0]; B_19_6 = [22, 20, 69, 25, 20, 0, 0]; 
B_20_6 = [25, 20, 83, 30, 22, 0, 0]; B_21_6 = [30, 22, 100, 31, 25, 0, 0]; 
B_22_6 = [31, 25, 126, 37, 30, 0, 0]; B_23_6 = [37, 30, 136, 40, 31, 0, 0]; 
B_24_6 = [40, 31, 170, 42, 37, 0, 0]; B_25_6 = [42, 37, 192, 50, 40, 0, 0]; 
B_26_6 = [50, 40, 210, 52, 42, 260, 210]; 
B_27_6 = [52, 42, 260, 54, 50, 0, 0]; B_28_6 = [54, 50, 280, 63, 52, 0, 0];
%l = 7
cell_6 = {B_6_6, B_7_6, B_8_6, B_9_6, B_10_6, B_11_6, B_12_6, B_13_6, B_14_6, B_15_6, B_16_6, B_17_6, B_18_6, B_19_6, B_20_6, B_21_6, B_22_6, B_23_6, B_24_6, B_25_6, B_26_6, B_27_6, B_28_6};

A_8 = [1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 4, 4, 8, 16, 32, 36, 64, 128, 256, 512, 1024, 2048, 4096, 5421, 9275, 17099]; 
%A(n, 8), n <= 27
B_8_8 = [1, 1, 1, 0, 0, 0, 0, 0, 0]; B_9_8 = [1, 1, 1, 0, 0, 0, 0, 0, 0];
B_10_8 = [1, 1, 1, 2, 1, 1, 1, 1, 1]; B_11_8 = [2, 1, 1, 2, 1, 1, 1, 1, 1]; 
B_12_8 = [2, 1, 1, 3, 1, 4, 1, 1, 1]; 
B_13_8 = [3, 1, 1, 3, 2, 4, 1, 1, 1]; 
B_14_8 = [3, 2, 1, 4, 2, 7, 4, 8, 1]; 
B_15_8 = [4, 2, 4, 6, 3, 10, 4, 15, 8]; 
B_16_8 = [6, 3, 7, 6, 3, 16, 7, 16, 15]; 
B_17_8 = [6, 3, 10, 7, 4, 17, 10, 24, 16];
B_18_8 = [7, 4, 16, 9, 6, 21, 16, 33, 24]; 
B_19_8 = [9, 6, 17, 12, 6, 28, 17, 52, 33]; 
B_20_8 = [12, 6, 21, 16, 7, 40, 21, 80, 52]; 
B_21_8 = [16, 7, 28, 21, 9, 56, 28, 120, 80]; 
B_22_8 = [21, 9, 40, 21, 12, 77, 40, 176, 120]; 
B_23_8 = [21, 12, 56, 23, 16, 0, 0, 253, 176]; 
B_24_8 = [23, 16, 77, 24, 21, 0, 0, 0, 0]; B_25_8 = [24, 21, 80, 30, 21, 0, 0, 0, 0]; 
B_26_8 = [30, 21, 92, 30, 23, 0, 0, 0, 0]; 
B_27_8 = [30, 23, 100, 32, 24, 0, 0, 0, 0]; %S_1 : 31-32
B_28_8 = [32, 24, 130, 33, 30, 0, 0, 0, 0]; %P: 31-32
%l = 9
cell_8 = {B_8_8, B_9_8, B_10_8, B_11_8, B_12_8, B_13_8, B_14_8, B_15_8, B_16_8, B_17_8, B_18_8, B_19_8, B_20_8, B_21_8, B_22_8, B_23_8, B_24_8, B_25_8, B_26_8, B_27_8, B_28_8};

A_10 = [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 4, 4, 6, 10, 20, 40, 47, 84, 150, 268, 466, 836, 1585]; 
%A(n, 10), n <= 27
B_10_10 = [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]; 
B_11_10 = [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]; 
B_12_10 = [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]; 
B_13_10 = [2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]; 
B_14_10 = [2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1]; 
B_15_10 = [2, 1, 1, 3, 1, 3, 1, 1, 1, 1, 1]; 
B_16_10 = [3, 1, 1, 3, 2, 4, 1, 4, 1, 1, 1]; 
B_17_10 = [3, 2, 2, 3, 2, 5, 2, 6, 1, 1, 1]; 
B_18_10 = [3, 2, 3, 4, 2, 6, 3, 9, 4, 10, 1]; 
B_19_10 = [4, 2, 4, 4, 3, 8, 4, 12, 6, 19, 10]; 
B_20_10 = [4, 3, 5, 5, 3, 10, 5, 17, 9, 20, 19]; 
B_21_10 = [5, 3, 6, 7, 3, 13, 6, 21, 12, 0, 0]; 
B_22_10 = [7, 3, 8, 7, 4, 16, 8, 0, 0, 0, 0]; 
B_23_10 = [7, 4, 10, 8, 4, 20, 10, 0, 0, 0, 0]; 
B_24_10 = [8, 4, 13, 9, 5, 24, 13, 0, 0, 0, 0]; 
B_25_10 = [9, 5, 16, 10, 7, 0, 0, 0, 0, 0, 0]; 
B_26_10 = [10, 7, 20, 13, 7, 0, 0, 0, 0, 0, 0]; 
B_27_10 = [13, 7, 24, 14, 8, 0, 0, 0, 0, 0, 0]; 
B_28_10 = [14, 8, 32, 16, 9, 0, 0, 0, 0, 0, 0]; %R:28-32 
%l = 11
cell_10 = {B_10_10, B_11_10, B_12_10, B_13_10, B_14_10, B_15_10, B_16_10, B_17_10, B_18_10, B_19_10, B_20_10, B_21_10, B_22_10, B_23_10, B_24_10, B_25_10, B_26_10, B_27_10, B_28_10};

A_12 = [1, 1, 1, 1, 1, 1, 1, 1, 1 ,1 ,1, 2, 2, 2, 2, 2, 2, 4, 4, 6, 8, 12, 24, 48, 55, 96, 169];
%A(n, 12), n <= 27 
B_12_12 = [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; 
B_13_12 = [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; 
B_14_12 = [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; 
B_15_12 = [2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; 
B_16_12 = [2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1]; 
B_17_12 = [2, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1];
B_18_12 = [2, 1, 1, 3, 1, 3, 1, 4, 1, 1, 1, 1, 1]; 
B_19_12 = [3, 1, 1, 3, 2, 3, 1, 4, 1, 1, 1, 1, 1]; 
B_20_12 = [3, 2, 2, 3, 2, 5, 2, 5, 1, 6, 1, 1, 1];
B_21_12 = [3, 2, 2, 3, 2, 5, 2, 7, 4, 7, 1, 1, 1]; 
B_22_12 = [3, 2, 3, 4, 2, 6, 3, 8, 4, 11, 6, 12, 1]; 
B_23_12 = [4, 2, 3, 4, 3, 6, 3, 10, 5, 16, 7, 23, 12]; 
B_24_12 = [4, 3, 5, 4, 3, 9, 5, 16, 7, 24, 11, 24, 23]; 
B_25_12 = [4, 3, 5, 5, 3, 10, 5, 25, 8, 0, 0, 0, 0]; 
B_26_12 = [5, 3, 6, 5, 3, 13, 6, 26, 10, 0, 0, 0, 0];
B_27_12 = [5, 3, 6, 6, 4, 15, 6, 39, 10, 0, 0, 0, 0]; 
B_28_12 = [6, 4, 9, 8, 4, 19, 9, 0, 0, 0, 0, 0, 0];
%l = 13
cell_12 = {B_12_12, B_13_12, B_14_12, B_15_12, B_16_12, B_17_12, B_18_12, B_19_12, B_20_12, B_21_12, B_22_12, B_23_12, B_24_12, B_25_12, B_26_12, B_27_12, B_28_12};

%P : A(n-1, d, (d/2)+1)
%E : A(n-(d/2), d, (d/2)+1)
%R : A(n-(d/2)+2, d, (d/2)+2)
%S_i : A(n, d, (d/2)+i)
%T_i : A(n-(d/2)+i, d, (d/2)+i)
%const_n_d = [P, E, R];
const_4_4 = [1]; %3
const_5_4 = [1]; %3
const_6_4 = [4]; %3
const_6_6 = [1]; %4
const_7_4 = [7]; %3
const_7_6 = [1]; %4
const_8_4 = [8, 14]; %3-4
const_8_6 = [2]; %4
const_8_8 = [1]; %5
const_9_4 = [12, 18]; %3-4
const_9_6 = [3]; %4
const_9_8 = [1]; %5
const_10_4 = [13, 30, 36]; %3-5
const_10_6 = [5, 6]; %4-5
const_10_8 = [2]; %5
const_10_10 = [1]; %6
const_11_4 = [17, 35, 66]; %3-5
const_11_6 = [6, 11]; %4-5
const_11_8 = [2]; %5
const_11_10 = [1]; %6
const_12_4 = [20, 51, 80, 132]; %3-6
const_12_6 = [9, 12, 22]; %4-6
const_12_8 = [3, 4]; %5-6
const_12_10 = [2]; %6
const_12_12 = [1]; %7
const_13_4 = [26, 65, 123, 166]; %3-6
const_13_6 = [13, 18, 26]; %4-6
const_13_8 = [3, 4]; %5-6
const_13_10 = [2]; %6
const_13_12 = [1]; %7
const_14_4 = [28, 91, 169, 278, 325]; %3-7
const_14_6 = [14, 28, 42, 42]; %4-7
const_14_8 = [4, 7, 8]; %5-7
const_14_10 = [2, 2]; %6-7
const_14_12 = [2]; %7
const_15_4 = [35, 105, 242, 399, 585]; %3-7
const_15_6 = [15, 42, 70, 69]; %4-7
const_15_8 = [6, 10, 15]; %5-7
const_15_10 = [3, 3]; %6-7
const_15_12 = [2]; %7
const_16_4 = [37, 140, 322, 624, 836, 1170]; %3-8
const_16_6 = [20, 48, 112, 122, 138]; %4-8
const_16_8 = [6, 16, 16, 30]; %5-8
const_16_10 = [3, 4, 4]; %6-8
const_16_12 = [2, 2]; %7-8
const_17_4 = [44, 157, 444, 854, 1416, 1770]; %3-8
const_17_6 = [20, 68, 124, 206, 259]; %4-8
const_17_8 = [7, 17, 24, 34]; %5-8
const_17_10 = [3, 5, 6]; %6-8
const_17_12 = [2, 2]; %7-8
const_18_4 = [48, 198, 544, 1260, 2042, 3186, 3540]; %3-9
const_18_6 = [22, 72, 186, 312, 427, 424]; %4-9
const_18_8 = [9, 21, 33, 49, 58]; %5-9
const_18_10 = [4, 6, 9, 10]; %6-9
const_18_12 = [3, 3, 4]; %7-9
const_19_4 = [57, 228, 692, 1620, 3172, 4698, 6726]; %3-9
const_19_6 = [25, 83, 228, 463, 693, 789]; %4-9
const_19_8 = [12, 28, 52, 78, 103]; %5-9
const_19_10 = [4, 8, 12, 19]; %6-9
const_19_12 = [3, 3, 4]; %7-9
const_20_4 = [60, 285, 874, 2304, 4213, 7830, 10048, 13452]; %3-10
const_20_6 = [30, 100, 276, 651, 1084, 1363, 1420]; %4-10
const_20_8 = [16, 40, 80, 130, 173, 206]; %5-10
const_20_10 = [5, 10, 17, 20, 38]; %6-10
const_20_12 = [3, 5, 5, 6]; %7-10
const_21_4 = [70, 315, 1113, 2880, 6161, 10767, 17177, 20654]; %3-10
const_21_6 = [31, 126, 350, 828, 1665, 2328, 2685]; %4-10
const_21_8 = [21, 56, 120, 210, 294, 363]; %5-10
const_21_10 = [7, 13, 21, 35, 42]; %6-10
const_21_12 = [3, 5, 7, 7]; %7-10
const_22_4 = [73, 385, 1386, 3927, 8338, 16527, 25902, 37127, 40624]; %3-11
const_22_6 = [37, 136, 462, 1100, 2277, 3736, 4415, 5033]; %4-11
const_22_8 = [21, 77, 176, 330, 440, 616, 672]; %5-11
const_22_10 = [7, 16, 33, 51, 71, 79]; %6-11
const_22_12 = [4, 6, 8, 11, 12]; %7-11
const_23_4 = [83, 419, 1771, 5313, 11696, 23467, 41413, 58659, 76233]; %3-11
const_23_6 = [40, 170, 521, 1518, 3162, 5819, 7521, 7953]; %4-11
const_23_8 = [23, 80, 253, 506, 662, 1012, 1288]; %5-11
const_23_10 = [8, 20, 46, 78, 116, 135]; %6-11
const_23_12 = [4, 6, 10, 16, 23]; %7-11
const_24_4 = [88, 498, 1920, 7084, 15656, 34914, 59904, 98852, 118422, 151484]; %3-12
const_24_6 = [42, 192, 680, 1786, 4554, 8432, 12186, 14682, 15906]; %4-12
const_24_8 = [24, 92, 274, 759, 968, 1551, 2142, 2576]; %5-12
const_24_10 = [9, 24, 60, 116, 170, 222, 246]; %6-12
const_24_12 = [4, 9, 16, 24, 24, 46]; %7-12
const_25_4 = [100, 550, 2380, 7787, 21220, 47265, 89742, 142373, 198387, 231530]; %4-12
const_25_6 = [50, 210, 800, 2428, 5581, 12620, 19037, 24630, 30587]; %4-12
const_25_8 = [30, 100, 328, 850, 1366, 2333, 3422, 4087]; %5-12
const_25_10 = [10, 32, 75, 157, 262, 379, 433]; %6-12
const_25_12 = [5, 10, 25, 36, 42, 50]; %7-12
const_26_4 = [104, 650, 2816, 10010, 27050, 66352, 129708, 222775, 320584, 401937, 431724]; %3-13
const_26_6 = [52, 260, 910, 2971, 7891, 16122, 28893, 42017, 50169, 61174]; %4-13
const_26_8 = [30, 130, 371, 1066, 1901, 3496, 5208, 6741, 7080]; %5-13
const_26_10 = [13, 36, 104, 213, 397, 565, 691, 754]; %6-13
const_26_12 = [5, 13, 26, 37, 66, 83, 91]; %7-13
const_27_4 = [117, 702, 3456, 12012, 35874, 88604, 188561, 334859, 518014, 686164, 791461]; %3-13
const_27_6 = [54, 280, 1170, 3510, 10027, 23673, 43529, 66078, 84573, 91079]; %4-13
const_27_8 = [32, 135, 500, 1252, 2616, 4986, 7754, 10460, 11897]; %5-13
const_27_10 = [14, 48, 121, 291, 555, 871, 1190, 1406]; %6-13
const_27_12 = [6, 15, 39, 58, 90, 139, 155]; %7-13
const_28_4 = [121, 819, 3718, 15288, 44915, 122685, 263008, 508952, 819041, 1167909, 1420920, 1535756]; %3-14
const_28_6 = [63, 302, 1306, 4680, 12285, 31195, 63756, 104230, 142117, 164219, 169739]; %4-14
const_28_8 = [33, 149, 540, 1750, 3855, 7016, 11896, 17008, 21148, 22710]; %5-14
const_28_10 = [16, 56, 168, 376, 785, 1351, 1977, 2438, 2628]; %6-14
const_28_12 = [8, 19, 45, 87, 147, 198, 244, 264]; %7-14
cell_c_4 = {const_4_4, const_5_4, const_6_4, const_7_4, const_8_4, const_9_4, const_10_4, const_11_4, const_12_4, const_13_4, const_14_4, const_15_4, const_16_4, const_17_4, const_18_4, const_19_4, const_20_4, const_21_4, const_22_4, const_23_4, const_24_4, const_25_4, const_26_4, const_27_4, const_28_4};
cell_c_6 = {const_6_6, const_7_6, const_8_6, const_9_6, const_10_6, const_11_6, const_12_6, const_13_6, const_14_6, const_15_6, const_16_6, const_17_6, const_18_6, const_19_6, const_20_6, const_21_6, const_22_6, const_23_6, const_24_6, const_25_6, const_26_6, const_27_6, const_28_6};
cell_c_8 = {const_8_8, const_9_8, const_10_8, const_11_8, const_12_8, const_13_8, const_14_8, const_15_8, const_16_8, const_17_8, const_18_8, const_19_8, const_20_8, const_21_8, const_22_8, const_23_8, const_24_8, const_25_8, const_26_8, const_27_8, const_28_8};
cell_c_10 = {const_10_10, const_11_10, const_12_10, const_13_10, const_14_10, const_15_10, const_16_10, const_17_10, const_18_10, const_19_10, const_20_10, const_21_10, const_22_10, const_23_10, const_24_10, const_25_10, const_26_10, const_27_10, const_28_10};
cell_c_12 = {const_12_12, const_13_12, const_14_12, const_15_12, const_16_12, const_17_12, const_18_12, const_19_12, const_20_12, const_21_12, const_22_12, const_23_12, const_24_12, const_25_12, const_26_12, const_27_12, const_28_12};

%doubly-constant-weight codes
T = cell(13, 26, 13, 26, 5); %T{w_1, n_1, w_2, n_2, d}, d = {4, 6, 8, 10, 12}, n_1 <= n_2, w_1 <= n_1 / 2, w_2 <= n_2 / 2

for i = 1: 13
    for j = 1: 26
        for i_1 = 1: 13
            for j_1 = 1: 26
                for k = 1: 5
                    T{i, j, i_1, j_1, k} = 0;
                end
            end
        end
    end
end

clear i j i_1 j_1 k;

%d = 4
T{ 1, 2, 2, 4, 1} = 4; T{ 1, 2, 2, 5, 1} = 4; T{ 1, 2, 2, 6, 1} = 6; T{ 1, 2, 2, 7, 1} = 6; T{ 1, 2, 2, 8, 1} = 8; T{ 1, 2, 2, 9, 1} = 8; T{ 1, 2, 2, 10, 1} = 10; 
T{ 1, 2, 2, 11, 1} = 10;T{ 1, 2, 2, 12, 1} = 12;T{ 1, 2, 2, 13, 1} = 12;T{ 1, 2, 2, 14, 1} = 14; T{ 1, 2, 2, 15, 1} = 14; T{ 1, 2, 2, 16, 1} = 16;T{ 1, 2, 2, 17, 1} = 16;
T{ 1, 2, 2, 18, 1} = 18;T{ 1, 2, 2, 19, 1} = 18;T{ 1, 2, 2, 20, 1} = 20; T{ 1, 2, 2, 21, 1} = 20;T{ 1, 2, 2, 22, 1} = 22;T{ 1, 2, 2, 23, 1} = 22;T{ 1, 2, 2, 24, 1} = 24;
T{ 1, 2, 2, 25, 1} = 24;T{ 1, 2, 2, 26, 1} = 26;
T{ 1, 3, 2, 4, 1} = 6; T{ 1, 3, 2, 5, 1} = 6; T{ 1, 3, 2, 6, 1} = 9; T{ 1, 3, 2, 7, 1} = 9; T{ 1, 3, 2, 8, 1} = 12; T{ 1, 3, 2, 9, 1} = 12; T{ 1, 3, 2, 10, 1} = 15; 
T{ 1, 3, 2, 11, 1} = 15;T{ 1, 3, 2, 12, 1} = 18;T{ 1, 3, 2, 13, 1} = 18;T{ 1, 3, 2, 14, 1} = 21; T{ 1, 3, 2, 15, 1} = 21; T{ 1, 3, 2, 16, 1} = 24;T{ 1, 3, 2, 17, 1} = 24;
T{ 1, 3, 2, 18, 1} = 27;T{ 1, 3, 2, 19, 1} = 27;T{ 1, 3, 2, 20, 1} = 30; T{ 1, 3, 2, 21, 1} = 30;T{ 1, 3, 2, 22, 1} = 33;T{ 1, 3, 2, 23, 1} = 33;T{ 1, 3, 2, 24, 1} = 36;
T{ 1, 3, 2, 25, 1} = 26;
T{ 1, 4, 2, 4, 1} = 6; T{ 1, 4, 2, 5, 1} = 8; T{ 1, 4, 2, 6, 1} = 12; T{ 1, 4, 2, 7, 1} = 12; T{ 1, 4, 2, 8, 1} = 16; T{ 1, 4, 2, 9, 1} = 16; T{ 1, 4, 2, 10, 1} = 20; 
T{ 1, 4, 2, 11, 1} = 20;T{ 1, 4, 2, 12, 1} = 24;T{ 1, 4, 2, 13, 1} = 24;T{ 1, 4, 2, 14, 1} = 28; T{ 1, 4, 2, 15, 1} = 28; T{ 1, 4, 2, 16, 1} = 32;T{ 1, 4, 2, 17, 1} = 32;
T{ 1, 4, 2, 18, 1} = 36;T{ 1, 4, 2, 19, 1} = 36;T{ 1, 4, 2, 20, 1} = 40; T{ 1, 4, 2, 21, 1} = 40;T{ 1, 4, 2, 22, 1} = 44;T{ 1, 4, 2, 23, 1} = 44;T{ 1, 4, 2, 24, 1} = 48;
T{ 1, 5, 2, 4, 1} = 6; T{ 1, 5, 2, 5, 1} = 10; T{ 1, 5, 2, 6, 1} = 15; T{ 1, 5, 2, 7, 1} = 15; T{ 1, 5, 2, 8, 1} = 20; T{ 1, 5, 2, 9, 1} = 20; T{ 1, 5, 2, 10, 1} = 25; 
T{ 1, 5, 2, 11, 1} = 25;T{ 1, 5, 2, 12, 1} = 30;T{ 1, 5, 2, 13, 1} = 30;T{ 1, 5, 2, 14, 1} = 35; T{ 1, 5, 2, 15, 1} = 35; T{ 1, 5, 2, 16, 1} = 40;T{ 1, 5, 2, 17, 1} = 40;
T{ 1, 5, 2, 18, 1} = 45;T{ 1, 5, 2, 19, 1} = 45;T{ 1, 5, 2, 20, 1} = 50; T{ 1, 5, 2, 21, 1} = 50;T{ 1, 5, 2, 22, 1} = 55;T{ 1, 5, 2, 23, 1} = 55;
T{ 1, 6, 2, 4, 1} = 6; T{ 1, 6, 2, 5, 1} = 10; T{ 1, 6, 2, 6, 1} = 15; T{ 1, 6, 2, 7, 1} = 18; T{ 1, 6, 2, 8, 1} = 24; T{ 1, 6, 2, 9, 1} = 24; T{ 1, 6, 2, 10, 1} = 30; 
T{ 1, 6, 2, 11, 1} = 30;T{ 1, 6, 2, 12, 1} = 36;T{ 1, 6, 2, 13, 1} = 36;T{ 1, 6, 2, 14, 1} = 42; T{ 1, 6, 2, 15, 1} = 42; T{ 1, 6, 2, 16, 1} = 48;T{ 1, 6, 2, 17, 1} = 48;
T{ 1, 6, 2, 18, 1} = 54;T{ 1, 6, 2, 19, 1} = 54;T{ 1, 6, 2, 20, 1} = 60; T{ 1, 6, 2, 21, 1} = 60;T{ 1, 6, 2, 22, 1} = 66;
T{ 1, 7, 2, 4, 1} = 6; T{ 1, 7, 2, 5, 1} = 10; T{ 1, 7, 2, 6, 1} = 15; T{ 1, 7, 2, 7, 1} = 21; T{ 1, 7, 2, 8, 1} = 28; T{ 1, 7, 2, 9, 1} = 28; T{ 1, 7, 2, 10, 1} = 35; 
T{ 1, 7, 2, 11, 1} = 35;T{ 1, 7, 2, 12, 1} = 42;T{ 1, 7, 2, 13, 1} = 42;T{ 1, 7, 2, 14, 1} = 49; T{ 1, 7, 2, 15, 1} = 49; T{ 1, 7, 2, 16, 1} = 56;T{ 1, 7, 2, 17, 1} = 56;
T{ 1, 7, 2, 18, 1} = 63;T{ 1, 7, 2, 19, 1} = 63;T{ 1, 7, 2, 20, 1} = 70; T{ 1, 7, 2, 21, 1} = 70;
T{ 1, 8, 2, 4, 1} = 6; T{ 1, 8, 2, 5, 1} = 10; T{ 1, 8, 2, 6, 1} = 15; T{ 1, 8, 2, 7, 1} = 21; T{ 1, 8, 2, 8, 1} = 28; T{ 1, 8, 2, 9, 1} = 32; T{ 1, 8, 2, 10, 1} = 40; 
T{ 1, 8, 2, 11, 1} = 40;T{ 1, 8, 2, 12, 1} = 48;T{ 1, 8, 2, 13, 1} = 48;T{ 1, 8, 2, 14, 1} = 56; T{ 1, 8, 2, 15, 1} = 56; T{ 1, 8, 2, 16, 1} = 64;T{ 1, 8, 2, 17, 1} = 64;
T{ 1, 8, 2, 18, 1} = 72;T{ 1, 8, 2, 19, 1} = 72;T{ 1, 8, 2, 20, 1} = 80;
T{ 1, 9, 2, 4, 1} = 6; T{ 1, 9, 2, 5, 1} = 10; T{ 1, 9, 2, 6, 1} = 15; T{ 1, 9, 2, 7, 1} = 21; T{ 1, 9, 2, 8, 1} = 28; T{ 1, 9, 2, 9, 1} = 36; T{ 1, 9, 2, 10, 1} = 45; 
T{ 1, 9, 2, 11, 1} = 45;T{ 1, 9, 2, 12, 1} = 54;T{ 1, 9, 2, 13, 1} = 54;T{ 1, 9, 2, 14, 1} = 63; T{ 1, 9, 2, 15, 1} = 63; T{ 1, 9, 2, 16, 1} = 72;T{ 1, 9, 2, 17, 1} = 72;
T{ 1, 9, 2, 18, 1} = 81;T{ 1, 9, 2, 19, 1} = 81;
T{ 1, 10, 2, 4, 1} = 6; T{ 1, 10, 2, 5, 1} = 10; T{ 1, 10, 2, 6, 1} = 15; T{ 1, 10, 2, 7, 1} = 21; T{ 1, 10, 2, 8, 1} = 28; T{ 1, 10, 2, 9, 1} = 36; T{ 1, 10, 2, 10, 1} = 45; 
T{ 1, 10, 2, 11, 1} = 50;T{ 1, 10, 2, 12, 1} = 60;T{ 1, 10, 2, 13, 1} = 60;T{ 1, 10, 2, 14, 1} = 70; T{ 1, 10, 2, 15, 1} = 70; T{ 1, 10, 2, 16, 1} = 80;
T{ 1, 10, 2, 17, 1} = 80;T{ 1, 10, 2, 18, 1} = 90;
T{ 1, 11, 2, 4, 1} = 6; T{ 1, 11, 2, 5, 1} = 10; T{ 1, 11, 2, 6, 1} = 15; T{ 1, 11, 2, 7, 1} = 21; T{ 1, 11, 2, 8, 1} = 28; T{ 1, 11, 2, 9, 1} = 36; T{ 1, 11, 2, 10, 1} = 45; 
T{ 1, 11, 2, 11, 1} = 55;T{ 1, 11, 2, 12, 1} = 66;T{ 1, 11, 2, 13, 1} = 66;T{ 1, 11, 2, 14, 1} = 77; T{ 1, 11, 2, 15, 1} = 77; T{ 1, 11, 2, 16, 1} = 88;
T{ 1, 11, 2, 17, 1} = 88;
T{ 1, 12, 2, 4, 1} = 6; T{ 1, 12, 2, 5, 1} = 10; T{ 1, 12, 2, 6, 1} = 15; T{ 1, 12, 2, 7, 1} = 21; T{ 1, 12, 2, 8, 1} = 28; T{ 1, 12, 2, 9, 1} = 36; T{ 1, 12, 2, 10, 1} = 45; 
T{ 1, 12, 2, 11, 1} = 55;T{ 1, 12, 2, 12, 1} = 66;T{ 1, 12, 2, 13, 1} = 72;T{ 1, 12, 2, 14, 1} = 84; T{ 1, 12, 2, 15, 1} = 84; T{ 1, 12, 2, 16, 1} = 96;
T{ 1, 13, 2, 4, 1} = 6; T{ 1, 13, 2, 5, 1} = 10; T{ 1, 13, 2, 6, 1} = 15; T{ 1, 13, 2, 7, 1} = 21; T{ 1, 13, 2, 8, 1} = 28; T{ 1, 13, 2, 9, 1} = 36; T{ 1, 13, 2, 10, 1} = 45; 
T{ 1, 13, 2, 11, 1} = 55;T{ 1, 13, 2, 12, 1} = 66;T{ 1, 13, 2, 13, 1} = 78;T{ 1, 13, 2, 14, 1} = 91; T{ 1, 13, 2, 15, 1} = 91; 
T{ 1, 14, 2, 4, 1} = 6; T{ 1, 14, 2, 5, 1} = 10; T{ 1, 14, 2, 6, 1} = 15; T{ 1, 14, 2, 7, 1} = 21; T{ 1, 14, 2, 8, 1} = 28; T{ 1, 14, 2, 9, 1} = 36; T{ 1, 14, 2, 10, 1} = 45; 
T{ 1, 14, 2, 11, 1} = 55;T{ 1, 14, 2, 12, 1} = 66;T{ 1, 14, 2, 13, 1} = 78;T{ 1, 14, 2, 14, 1} = 91;
T{ 1, 15, 2, 4, 1} = 6; T{ 1, 15, 2, 5, 1} = 10; T{ 1, 15, 2, 6, 1} = 15; T{ 1, 15, 2, 7, 1} = 21; T{ 1, 15, 2, 8, 1} = 28; T{ 1, 15, 2, 9, 1} = 36; T{ 1, 15, 2, 10, 1} = 45; 
T{ 1, 15, 2, 11, 1} = 55;T{ 1, 15, 2, 12, 1} = 66;T{ 1, 15, 2, 13, 1} = 78;
T{ 1, 16, 2, 4, 1} = 6; T{ 1, 16, 2, 5, 1} = 10; T{ 1, 16, 2, 6, 1} = 15; T{ 1, 16, 2, 7, 1} = 21; T{ 1, 16, 2, 8, 1} = 28; T{ 1, 16, 2, 9, 1} = 36; T{ 1, 16, 2, 10, 1} = 45; 
T{ 1, 16, 2, 11, 1} = 55;T{ 1, 16, 2, 12, 1} = 66;
T{ 1, 17, 2, 4, 1} = 6; T{ 1, 17, 2, 5, 1} = 10; T{ 1, 17, 2, 6, 1} = 15; T{ 1, 17, 2, 7, 1} = 21; T{ 1, 17, 2, 8, 1} = 28; T{ 1, 17, 2, 9, 1} = 36; T{ 1, 17, 2, 10, 1} = 45; 
T{ 1, 17, 2, 11, 1} = 55;
T{ 1, 18, 2, 4, 1} = 6; T{ 1, 18, 2, 5, 1} = 10; T{ 1, 18, 2, 6, 1} = 15; T{ 1, 18, 2, 7, 1} = 21; T{ 1, 18, 2, 8, 1} = 28; T{ 1, 18, 2, 9, 1} = 36; T{ 1, 18, 2, 10, 1} = 45; 
T{ 1, 19, 2, 4, 1} = 6; T{ 1, 19, 2, 5, 1} = 10; T{ 1, 19, 2, 6, 1} = 15; T{ 1, 19, 2, 7, 1} = 21; T{ 1, 19, 2, 8, 1} = 28; T{ 1, 19, 2, 9, 1} = 36;
T{ 1, 20, 2, 4, 1} = 6; T{ 1, 20, 2, 5, 1} = 10; T{ 1, 20, 2, 6, 1} = 15; T{ 1, 20, 2, 7, 1} = 21; T{ 1, 20, 2, 8, 1} = 28; 
T{ 1, 21, 2, 4, 1} = 6; T{ 1, 21, 2, 5, 1} = 10; T{ 1, 21, 2, 6, 1} = 15; T{ 1, 21, 2, 7, 1} = 21; 
T{ 1, 22, 2, 4, 1} = 6; T{ 1, 22, 2, 5, 1} = 10; T{ 1, 22, 2, 6, 1} = 15;
T{ 1, 23, 2, 4, 1} = 6; T{ 1, 23, 2, 5, 1} = 10; 
T{ 1, 24, 2, 4, 1} = 6;
T{ 1, 2, 3, 6, 1} = 8; T{ 1, 2, 3, 7, 1} = 14; T{ 1, 2, 3, 8, 1} = 16; T{ 1, 2, 3, 9, 1} = 24; T{ 1, 2, 3, 10, 1} = 26; T{ 1, 2, 3, 11, 1} = 34; T{ 1, 2, 3, 12, 1} = 40; 
T{ 1, 2, 3, 13, 1} = 52;T{ 1, 2, 3, 14, 1} = 56;T{ 1, 2, 3, 15, 1} = 70;T{ 1, 2, 3, 16, 1} = 74; T{ 1, 2, 3, 17, 1} = 88; T{ 1, 2, 3, 18, 1} = 96;T{ 1, 2, 3, 19, 1} = 114;
T{ 1, 2, 3, 20, 1} = 120;T{ 1, 2, 3, 21, 1} = 140;T{ 1, 2, 3, 22, 1} = 146; T{ 1, 2, 3, 23, 1} = 166;T{ 1, 2, 3, 24, 1} = 176;T{ 1, 2, 3, 25, 1} = 200;
T{ 1, 2, 3, 26, 1} = 208;
T{ 1, 3, 3, 6, 1} = 12; T{ 1, 3, 3, 7, 1} = 21; T{ 1, 3, 3, 8, 1} = 24; T{ 1, 3, 3, 9, 1} = 36; T{ 1, 3, 3, 10, 1} = 39; T{ 1, 3, 3, 11, 1} = 51; T{ 1, 3, 3, 12, 1} = 60; 
T{ 1, 3, 3, 13, 1} = 78;T{ 1, 3, 3, 14, 1} = 84;T{ 1, 3, 3, 15, 1} = 105;T{ 1, 3, 3, 16, 1} = 111; T{ 1, 3, 3, 17, 1} = 132; T{ 1, 3, 3, 18, 1} = 144;T{ 1, 3, 3, 19, 1} = 171;
T{ 1, 3, 3, 20, 1} = 180;T{ 1, 3, 3, 21, 1} = 210;T{ 1, 3, 3, 22, 1} = 219; T{ 1, 3, 3, 23, 1} = 249;T{ 1, 3, 3, 24, 1} = 264;T{ 1, 3, 3, 25, 1} = 300;
T{ 1, 4, 3, 6, 1} = 16; T{ 1, 4, 3, 7, 1} = 28; T{ 1, 4, 3, 8, 1} = 32; T{ 1, 4, 3, 9, 1} = 48; T{ 1, 4, 3, 10, 1} = 52; T{ 1, 4, 3, 11, 1} = 68; T{ 1, 4, 3, 12, 1} = 80; 
T{ 1, 4, 3, 13, 1} = 104;T{ 1, 4, 3, 14, 1} = 112;T{ 1, 4, 3, 15, 1} = 140;T{ 1, 4, 3, 16, 1} = 148; T{ 1, 4, 3, 17, 1} = 176; T{ 1, 4, 3, 18, 1} = 192;
T{ 1, 4, 3, 19, 1} = 228;T{ 1, 4, 3, 20, 1} = 240;T{ 1, 4, 3, 21, 1} = 280;T{ 1, 4, 3, 22, 1} = 292; T{ 1, 4, 3, 23, 1} = 332;T{ 1, 4, 3, 24, 1} = 352;
T{ 1, 5, 3, 6, 1} = 20; T{ 1, 5, 3, 7, 1} = 35; T{ 1, 5, 3, 8, 1} = 40; T{ 1, 5, 3, 9, 1} = 60; T{ 1, 5, 3, 10, 1} = 65; T{ 1, 5, 3, 11, 1} = 85; T{ 1, 5, 3, 12, 1} = 100; 
T{ 1, 5, 3, 13, 1} = 130;T{ 1, 5, 3, 14, 1} = 140;T{ 1, 5, 3, 15, 1} = 175;T{ 1, 5, 3, 16, 1} = 185; T{ 1, 5, 3, 17, 1} = 220; T{ 1, 5, 3, 18, 1} = 240;
T{ 1, 5, 3, 19, 1} = 285;T{ 1, 5, 3, 20, 1} = 300;T{ 1, 5, 3, 21, 1} = 350;T{ 1, 5, 3, 22, 1} = 365; T{ 1, 5, 3, 23, 1} = 415;
T{ 1, 6, 3, 6, 1} = 20; T{ 1, 6, 3, 7, 1} = 35; T{ 1, 6, 3, 8, 1} = 48; T{ 1, 6, 3, 9, 1} = 72; T{ 1, 6, 3, 10, 1} = 78; T{ 1, 6, 3, 11, 1} = 102; T{ 1, 6, 3, 12, 1} = 120; 
T{ 1, 6, 3, 13, 1} = 156;T{ 1, 6, 3, 14, 1} = 168;T{ 1, 6, 3, 15, 1} = 210;T{ 1, 6, 3, 16, 1} = 222; T{ 1, 6, 3, 17, 1} = 264; T{ 1, 6, 3, 18, 1} = 288;
T{ 1, 6, 3, 19, 1} = 342;T{ 1, 6, 3, 20, 1} = 360;T{ 1, 6, 3, 21, 1} = 420;T{ 1, 6, 3, 22, 1} = 438;
T{ 1, 7, 3, 6, 1} = 20; T{ 1, 7, 3, 7, 1} = 35; T{ 1, 7, 3, 8, 1} = 56; T{ 1, 7, 3, 9, 1} = 84; T{ 1, 7, 3, 10, 1} = 91; T{ 1, 7, 3, 11, 1} = 119; T{ 1, 7, 3, 12, 1} = 140; 
T{ 1, 7, 3, 13, 1} = 182;T{ 1, 7, 3, 14, 1} = 196;T{ 1, 7, 3, 15, 1} = 245;T{ 1, 7, 3, 16, 1} = 259; T{ 1, 7, 3, 17, 1} = 308; T{ 1, 7, 3, 18, 1} = 336;
T{ 1, 7, 3, 19, 1} = 399;T{ 1, 7, 3, 20, 1} = 420;T{ 1, 7, 3, 21, 1} = 490;
T{ 1, 8, 3, 6, 1} = 20; T{ 1, 8, 3, 7, 1} = 35; T{ 1, 8, 3, 8, 1} = 56; T{ 1, 8, 3, 9, 1} = 84; T{ 1, 8, 3, 10, 1} = 104; T{ 1, 8, 3, 11, 1} = 136; T{ 1, 8, 3, 12, 1} = 160; 
T{ 1, 8, 3, 13, 1} = 208;T{ 1, 8, 3, 14, 1} = 224;T{ 1, 8, 3, 15, 1} = 280;T{ 1, 8, 3, 16, 1} = 296; T{ 1, 8, 3, 17, 1} = 352; T{ 1, 8, 3, 18, 1} = 384;
T{ 1, 8, 3, 19, 1} = 456;T{ 1, 8, 3, 20, 1} = 480;
T{ 1, 9, 3, 6, 1} = 20; T{ 1, 9, 3, 7, 1} = 35; T{ 1, 9, 3, 8, 1} = 56; T{ 1, 9, 3, 9, 1} = 84; T{ 1, 9, 3, 10, 1} = 117; T{ 1, 9, 3, 11, 1} = 153; T{ 1, 9, 3, 12, 1} = 180; 
T{ 1, 9, 3, 13, 1} = 234;T{ 1, 9, 3, 14, 1} = 252;T{ 1, 9, 3, 15, 1} = 315;T{ 1, 9, 3, 16, 1} = 333; T{ 1, 9, 3, 17, 1} = 396; T{ 1, 9, 3, 18, 1} = 432;
T{ 1, 9, 3, 19, 1} = 513;
T{ 1, 10, 3, 6, 1} = 20; T{ 1, 10, 3, 7, 1} = 35; T{ 1, 10, 3, 8, 1} = 56; T{ 1, 10, 3, 9, 1} = 84; T{ 1, 10, 3, 10, 1} = 120; T{ 1, 10, 3, 11, 1} = 165; 
T{ 1, 10, 3, 12, 1} = 200; T{ 1, 10, 3, 13, 1} = 260;T{ 1, 10, 3, 14, 1} = 280;T{ 1, 10, 3, 15, 1} = 350;T{ 1, 10, 3, 16, 1} = 370; T{ 1, 10, 3, 17, 1} = 440; 
T{ 1, 10, 3, 18, 1} = 480;
T{ 1, 11, 3, 6, 1} = 20; T{ 1, 11, 3, 7, 1} = 35; T{ 1, 11, 3, 8, 1} = 56; T{ 1, 11, 3, 9, 1} = 84; T{ 1, 11, 3, 10, 1} = 120; T{ 1, 11, 3, 11, 1} = 165; 
T{ 1, 11, 3, 12, 1} = 220; T{ 1, 11, 3, 13, 1} = 286;T{ 1, 11, 3, 14, 1} = 308;T{ 1, 11, 3, 15, 1} = 385;T{ 1, 11, 3, 16, 1} = 407; T{ 1, 11, 3, 17, 1} = 484; 
T{ 1, 12, 3, 6, 1} = 20; T{ 1, 12, 3, 7, 1} = 35; T{ 1, 12, 3, 8, 1} = 56; T{ 1, 12, 3, 9, 1} = 84; T{ 1, 12, 3, 10, 1} = 120; T{ 1, 12, 3, 11, 1} = 165; 
T{ 1, 12, 3, 12, 1} = 220; T{ 1, 12, 3, 13, 1} = 286;T{ 1, 12, 3, 14, 1} = 336;T{ 1, 12, 3, 15, 1} = 420;T{ 1, 12, 3, 16, 1} = 444;
T{ 1, 13, 3, 6, 1} = 20; T{ 1, 13, 3, 7, 1} = 35; T{ 1, 13, 3, 8, 1} = 56; T{ 1, 13, 3, 9, 1} = 84; T{ 1, 13, 3, 10, 1} = 120; T{ 1, 13, 3, 11, 1} = 165; 
T{ 1, 13, 3, 12, 1} = 220; T{ 1, 13, 3, 13, 1} = 286;T{ 1, 13, 3, 14, 1} = 364;T{ 1, 13, 3, 15, 1} = 455;
T{ 1, 14, 3, 6, 1} = 20; T{ 1, 14, 3, 7, 1} = 35; T{ 1, 14, 3, 8, 1} = 56; T{ 1, 14, 3, 9, 1} = 84; T{ 1, 14, 3, 10, 1} = 120; T{ 1, 14, 3, 11, 1} = 165; 
T{ 1, 14, 3, 12, 1} = 220; T{ 1, 14, 3, 13, 1} = 286;T{ 1, 14, 3, 14, 1} = 364;
T{ 1, 15, 3, 6, 1} = 20; T{ 1, 15, 3, 7, 1} = 35; T{ 1, 15, 3, 8, 1} = 56; T{ 1, 15, 3, 9, 1} = 84; T{ 1, 15, 3, 10, 1} = 120; T{ 1, 15, 3, 11, 1} = 165; 
T{ 1, 15, 3, 12, 1} = 220; T{ 1, 15, 3, 13, 1} = 286;
T{ 1, 16, 3, 6, 1} = 20; T{ 1, 16, 3, 7, 1} = 35; T{ 1, 16, 3, 8, 1} = 56; T{ 1, 16, 3, 9, 1} = 84; T{ 1, 16, 3, 10, 1} = 120; T{ 1, 16, 3, 11, 1} = 165; 
T{ 1, 16, 3, 12, 1} = 220;
T{ 1, 17, 3, 6, 1} = 20; T{ 1, 17, 3, 7, 1} = 35; T{ 1, 17, 3, 8, 1} = 56; T{ 1, 17, 3, 9, 1} = 84; T{ 1, 17, 3, 10, 1} = 120; T{ 1, 17, 3, 11, 1} = 165; 
T{ 1, 18, 3, 6, 1} = 20; T{ 1, 18, 3, 7, 1} = 35; T{ 1, 18, 3, 8, 1} = 56; T{ 1, 18, 3, 9, 1} = 84; T{ 1, 18, 3, 10, 1} = 120;
T{ 1, 19, 3, 6, 1} = 20; T{ 1, 19, 3, 7, 1} = 35; T{ 1, 19, 3, 8, 1} = 56; T{ 1, 19, 3, 9, 1} = 84; 
T{ 1, 20, 3, 6, 1} = 20; T{ 1, 20, 3, 7, 1} = 35; T{ 1, 20, 3, 8, 1} = 56;
T{ 1, 21, 3, 6, 1} = 20; T{ 1, 21, 3, 7, 1} = 35; 
T{ 1, 22, 3, 6, 1} = 20;
T{ 1, 2, 4, 8, 1} = 28; T{ 1, 2, 4, 9, 1} = 36; T{ 1, 2, 4, 10, 1} = 60; T{ 1, 2, 4, 11, 1} = 70; T{ 1, 2, 4, 12, 1} = 102; T{ 1, 2, 4, 13, 1} = 130;
T{ 1, 2, 4, 14, 1} = 182;T{ 1, 2, 4, 15, 1} = 210;T{ 1, 2, 4, 16, 1} = 280; T{ 1, 2, 4, 17, 1} = 314; T{ 1, 2, 4, 18, 1} = 396;T{ 1, 2, 4, 19, 1} = 456;
T{ 1, 2, 4, 20, 1} = 570;T{ 1, 2, 4, 21, 1} = 630;T{ 1, 2, 4, 22, 1} = 770; T{ 1, 2, 4, 23, 1} = 838;T{ 1, 2, 4, 24, 1} = 996;T{ 1, 2, 4, 25, 1} = 1100;
T{ 1, 2, 4, 26, 1} = 1300;
T{ 1, 3, 4, 8, 1} = 42; T{ 1, 3, 4, 9, 1} = 54; T{ 1, 3, 4, 10, 1} = 90; T{ 1, 3, 4, 11, 1} = 105; T{ 1, 3, 4, 12, 1} = 153; T{ 1, 3, 4, 13, 1} = 195;
T{ 1, 3, 4, 14, 1} = 273;T{ 1, 3, 4, 15, 1} = 315;T{ 1, 3, 4, 16, 1} = 420; T{ 1, 3, 4, 17, 1} = 471; T{ 1, 3, 4, 18, 1} = 594;T{ 1, 3, 4, 19, 1} = 684;
T{ 1, 3, 4, 20, 1} = 855;T{ 1, 3, 4, 21, 1} = 945;T{ 1, 3, 4, 22, 1} = 1155; T{ 1, 3, 4, 23, 1} = 1257;T{ 1, 3, 4, 24, 1} = 1494;T{ 1, 3, 4, 25, 1} = 1650;
T{ 1, 4, 4, 8, 1} = 56; T{ 1, 4, 4, 9, 1} = 72; T{ 1, 4, 4, 10, 1} = 120; T{ 1, 4, 4, 11, 1} = 140; T{ 1, 4, 4, 12, 1} = 204; T{ 1, 4, 4, 13, 1} = 260;
T{ 1, 4, 4, 14, 1} = 364;T{ 1, 4, 4, 15, 1} = 420;T{ 1, 4, 4, 16, 1} = 560; T{ 1, 4, 4, 17, 1} = 628; T{ 1, 4, 4, 18, 1} = 792;T{ 1, 4, 4, 19, 1} = 912;
T{ 1, 4, 4, 20, 1} = 1140;T{ 1, 4, 4, 21, 1} = 1260;T{ 1, 4, 4, 22, 1} = 1540; T{ 1, 4, 4, 23, 1} = 1676;T{ 1, 4, 4, 24, 1} = 1992;
T{ 1, 5, 4, 8, 1} = 70; T{ 1, 5, 4, 9, 1} = 90; T{ 1, 5, 4, 10, 1} = 150; T{ 1, 5, 4, 11, 1} = 175; T{ 1, 5, 4, 12, 1} = 255; T{ 1, 5, 4, 13, 1} = 325;
T{ 1, 5, 4, 14, 1} = 455;T{ 1, 5, 4, 15, 1} = 525;T{ 1, 5, 4, 16, 1} = 700; T{ 1, 5, 4, 17, 1} = 785; T{ 1, 5, 4, 18, 1} = 990;T{ 1, 5, 4, 19, 1} = 1140;
T{ 1, 5, 4, 20, 1} = 1425;T{ 1, 5, 4, 21, 1} = 1575;T{ 1, 5, 4, 22, 1} = 1925; T{ 1, 5, 4, 23, 1} = 2095;
T{ 1, 6, 4, 8, 1} = 70; T{ 1, 6, 4, 9, 1} = 108; T{ 1, 6, 4, 10, 1} = 180; T{ 1, 6, 4, 11, 1} = 210; T{ 1, 6, 4, 12, 1} = 306; T{ 1, 6, 4, 13, 1} = 390;
T{ 1, 6, 4, 14, 1} = 546;T{ 1, 6, 4, 15, 1} = 630;T{ 1, 6, 4, 16, 1} = 840; T{ 1, 6, 4, 17, 1} = 942; T{ 1, 6, 4, 18, 1} = 1188;T{ 1, 6, 4, 19, 1} = 1368;
T{ 1, 6, 4, 20, 1} = 1710;T{ 1, 6, 4, 21, 1} = 1890;T{ 1, 6, 4, 22, 1} = 2310; 
T{ 1, 7, 4, 8, 1} = 70; T{ 1, 7, 4, 9, 1} = 126; T{ 1, 7, 4, 10, 1} = 210; T{ 1, 7, 4, 11, 1} = 245; T{ 1, 7, 4, 12, 1} = 357; T{ 1, 7, 4, 13, 1} = 455;
T{ 1, 7, 4, 14, 1} = 637;T{ 1, 7, 4, 15, 1} = 735;T{ 1, 7, 4, 16, 1} = 980; T{ 1, 7, 4, 17, 1} = 1099; T{ 1, 7, 4, 18, 1} = 1386;T{ 1, 7, 4, 19, 1} = 1596;
T{ 1, 7, 4, 20, 1} = 1995;T{ 1, 7, 4, 21, 1} = 2205;
T{ 1, 8, 4, 8, 1} = 70; T{ 1, 8, 4, 9, 1} = 126; T{ 1, 8, 4, 10, 1} = 210; T{ 1, 8, 4, 11, 1} = 280; T{ 1, 8, 4, 12, 1} = 408; T{ 1, 8, 4, 13, 1} = 520;
T{ 1, 8, 4, 14, 1} = 728;T{ 1, 8, 4, 15, 1} = 840;T{ 1, 8, 4, 16, 1} = 1120; T{ 1, 8, 4, 17, 1} = 1256; T{ 1, 8, 4, 18, 1} = 1584;T{ 1, 8, 4, 19, 1} = 1824;
T{ 1, 8, 4, 20, 1} = 2280;
T{ 1, 9, 4, 8, 1} = 70; T{ 1, 9, 4, 9, 1} = 126; T{ 1, 9, 4, 10, 1} = 210; T{ 1, 9, 4, 11, 1} = 315; T{ 1, 9, 4, 12, 1} = 459; T{ 1, 9, 4, 13, 1} = 585;
T{ 1, 9, 4, 14, 1} = 819;T{ 1, 9, 4, 15, 1} = 945;T{ 1, 9, 4, 16, 1} = 1260; T{ 1, 9, 4, 17, 1} = 1413; T{ 1, 9, 4, 18, 1} = 1782;T{ 1, 9, 4, 19, 1} = 2052;
T{ 1, 10, 4, 8, 1} = 70; T{ 1, 10, 4, 9, 1} = 126; T{ 1, 10, 4, 10, 1} = 210; T{ 1, 10, 4, 11, 1} = 330; T{ 1, 10, 4, 12, 1} = 495; T{ 1, 10, 4, 13, 1} = 650;
T{ 1, 10, 4, 14, 1} = 910;T{ 1, 10, 4, 15, 1} = 1050;T{ 1, 10, 4, 16, 1} = 1400; T{ 1, 10, 4, 17, 1} = 1570; T{ 1, 10, 4, 18, 1} = 1980;
T{ 1, 11, 4, 8, 1} = 70; T{ 1, 11, 4, 9, 1} = 126; T{ 1, 11, 4, 10, 1} = 210; T{ 1, 11, 4, 11, 1} = 330; T{ 1, 11, 4, 12, 1} = 495; T{ 1, 11, 4, 13, 1} = 715;
T{ 1, 11, 4, 14, 1} = 1001;T{ 1, 11, 4, 15, 1} = 1155;T{ 1, 11, 4, 16, 1} = 1540; T{ 1, 11, 4, 17, 1} = 1727; 
T{ 1, 12, 4, 8, 1} = 70; T{ 1, 12, 4, 9, 1} = 126; T{ 1, 12, 4, 10, 1} = 210; T{ 1, 12, 4, 11, 1} = 330; T{ 1, 12, 4, 12, 1} = 495; T{ 1, 12, 4, 13, 1} = 715;
T{ 1, 12, 4, 14, 1} = 1001;T{ 1, 12, 4, 15, 1} = 1260;T{ 1, 12, 4, 16, 1} = 1680; 
T{ 1, 13, 4, 8, 1} = 70; T{ 1, 13, 4, 9, 1} = 126; T{ 1, 13, 4, 10, 1} = 210; T{ 1, 13, 4, 11, 1} = 330; T{ 1, 13, 4, 12, 1} = 495; T{ 1, 13, 4, 13, 1} = 715;
T{ 1, 13, 4, 14, 1} = 1001;T{ 1, 13, 4, 15, 1} = 1365;
T{ 1, 14, 4, 8, 1} = 70; T{ 1, 14, 4, 9, 1} = 126; T{ 1, 14, 4, 10, 1} = 210; T{ 1, 14, 4, 11, 1} = 330; T{ 1, 14, 4, 12, 1} = 495; T{ 1, 14, 4, 13, 1} = 715;
T{ 1, 14, 4, 14, 1} = 1001;
T{ 1, 15, 4, 8, 1} = 70; T{ 1, 15, 4, 9, 1} = 126; T{ 1, 15, 4, 10, 1} = 210; T{ 1, 15, 4, 11, 1} = 330; T{ 1, 15, 4, 12, 1} = 495; T{ 1, 15, 4, 13, 1} = 715;
T{ 1, 16, 4, 8, 1} = 70; T{ 1, 16, 4, 9, 1} = 126; T{ 1, 16, 4, 10, 1} = 210; T{ 1, 16, 4, 11, 1} = 330; T{ 1, 16, 4, 12, 1} = 495;
T{ 1, 17, 4, 8, 1} = 70; T{ 1, 17, 4, 9, 1} = 126; T{ 1, 17, 4, 10, 1} = 210; T{ 1, 17, 4, 11, 1} = 330;
T{ 1, 18, 4, 8, 1} = 70; T{ 1, 18, 4, 9, 1} = 126; T{ 1, 18, 4, 10, 1} = 210;
T{ 1, 19, 4, 8, 1} = 70; T{ 1, 19, 4, 9, 1} = 126;
T{ 1, 20, 4, 8, 1} = 70;
T{ 1, 2, 5, 10, 1} = 72; T{ 1, 2, 5, 11, 1} = 132; T{ 1, 2, 5, 12, 1} = 168; T{ 1, 2, 5, 13, 1} = 264;
T{ 1, 2, 5, 14, 1} = 364;T{ 1, 2, 5, 15, 1} = 542;T{ 1, 2, 5, 16, 1} = 672; T{ 1, 2, 5, 17, 1} = 952;T{ 1, 2, 5, 18, 1} = 1130;T{ 1, 2, 5, 19, 1} = 1504;
T{ 1, 2, 5, 20, 1} = 1824;T{ 1, 2, 5, 21, 1} = 2394;T{ 1, 2, 5, 22, 1} = 2772; T{ 1, 2, 5, 23, 1} = 3542;T{ 1, 2, 5, 24, 1} = 4022;T{ 1, 2, 5, 25, 1} = 4980;
T{ 1, 2, 5, 26, 1} = 5720;
T{ 1, 3, 5, 10, 1} = 108; T{ 1, 3, 5, 11, 1} = 198; T{ 1, 3, 5, 12, 1} = 252; T{ 1, 3, 5, 13, 1} = 396;
T{ 1, 3, 5, 14, 1} = 546;T{ 1, 3, 5, 15, 1} = 813;T{ 1, 3, 5, 16, 1} = 1008; T{ 1, 3, 5, 17, 1} = 1428;T{ 1, 3, 5, 18, 1} = 1695;T{ 1, 3, 5, 19, 1} = 2256;
T{ 1, 3, 5, 20, 1} = 2736;T{ 1, 3, 5, 21, 1} = 3591;T{ 1, 3, 5, 22, 1} = 4158; T{ 1, 3, 5, 23, 1} = 5313;T{ 1, 3, 5, 24, 1} = 6033;T{ 1, 3, 5, 25, 1} = 7470;
T{ 1, 4, 5, 10, 1} = 144;T{ 1, 4, 5, 11, 1} = 264;T{ 1, 4, 5, 12, 1} = 336;T{ 1, 4, 5, 13, 1} = 528;
T{ 1, 4, 5, 14, 1} = 728;T{ 1, 4, 5, 15, 1} = 1084;T{ 1, 4, 5, 16, 1} = 1344;T{ 1, 4, 5, 17, 1} = 1904;T{ 1, 4, 5, 18, 1} = 2260;T{ 1, 4, 5, 19, 1} = 3008;
T{ 1, 4, 5, 20, 1} = 3648;T{ 1, 4, 5, 21, 1} = 4788;T{ 1, 4, 5, 22, 1} = 5544;T{ 1, 4, 5, 23, 1} = 7084;T{ 1, 4, 5, 24, 1} = 8044;
T{ 1, 5, 5, 10, 1} = 180;T{ 1, 5, 5, 11, 1} = 330;T{ 1, 5, 5, 12, 1} = 420;T{ 1, 5, 5, 13, 1} = 660;
T{ 1, 5, 5, 14, 1} = 910;T{ 1, 5, 5, 15, 1} = 1355;T{ 1, 5, 5, 16, 1} = 1680;T{ 1, 5, 5, 17, 1} = 2380;T{ 1, 5, 5, 18, 1} = 2825;T{ 1, 5, 5, 19, 1} = 3760;
T{ 1, 5, 5, 20, 1} = 4560;T{ 1, 5, 5, 21, 1} = 5985;T{ 1, 5, 5, 22, 1} = 6930;T{ 1, 5, 5, 23, 1} = 8855;
T{ 1, 6, 5, 10, 1} = 216;T{ 1, 6, 5, 11, 1} = 396;T{ 1, 6, 5, 12, 1} = 504;T{ 1, 6, 5, 13, 1} = 792;
T{ 1, 6, 5, 14, 1} = 1092;T{ 1, 6, 5, 15, 1} = 1626;T{ 1, 6, 5, 16, 1} = 2016;T{ 1, 6, 5, 17, 1} = 2856;T{ 1, 6, 5, 18, 1} = 3390;T{ 1, 6, 5, 19, 1} = 4512;
T{ 1, 6, 5, 20, 1} = 5472;T{ 1, 6, 5, 21, 1} = 7182;T{ 1, 6, 5, 22, 1} = 8316;
T{ 1, 7, 5, 10, 1} = 252;T{ 1, 7, 5, 11, 1} = 462;T{ 1, 7, 5, 12, 1} = 588;T{ 1, 7, 5, 13, 1} = 924;
T{ 1, 7, 5, 14, 1} = 1274;T{ 1, 7, 5, 15, 1} = 1897;T{ 1, 7, 5, 16, 1} = 2352;T{ 1, 7, 5, 17, 1} = 3332;T{ 1, 7, 5, 18, 1} = 3955;T{ 1, 7, 5, 19, 1} = 5264;
T{ 1, 7, 5, 20, 1} = 6384;T{ 1, 7, 5, 21, 1} = 8379;
T{ 1, 8, 5, 10, 1} = 252;T{ 1, 8, 5, 11, 1} = 462;T{ 1, 8, 5, 12, 1} = 672;T{ 1, 8, 5, 13, 1} = 1056;
T{ 1, 8, 5, 14, 1} = 1456;T{ 1, 8, 5, 15, 1} = 2168;T{ 1, 8, 5, 16, 1} = 2688;T{ 1, 8, 5, 17, 1} = 3808;T{ 1, 8, 5, 18, 1} = 4520;T{ 1, 8, 5, 19, 1} = 6016;
T{ 1, 8, 5, 20, 1} = 7296;
T{ 1, 9, 5, 10, 1} = 252;T{ 1, 9, 5, 11, 1} = 462;T{ 1, 9, 5, 12, 1} = 756;T{ 1, 9, 5, 13, 1} = 1188;
T{ 1, 9, 5, 14, 1} = 1638;T{ 1, 9, 5, 15, 1} = 2439;T{ 1, 9, 5, 16, 1} = 3024;T{ 1, 9, 5, 17, 1} = 4284;T{ 1, 9, 5, 18, 1} = 5085;T{ 1, 9, 5, 19, 1} = 6768;
T{ 1, 10, 5, 10, 1} = 252;T{ 1, 10, 5, 11, 1} = 462;T{ 1, 10, 5, 12, 1} = 792;T{ 1, 10, 5, 13, 1} = 1287;
T{ 1, 10, 5, 14, 1} = 1820;T{ 1, 10, 5, 15, 1} = 2710;T{ 1, 10, 5, 16, 1} = 3360;T{ 1, 10, 5, 17, 1} = 4760;T{ 1, 10, 5, 18, 1} = 5650;
T{ 1, 11, 5, 10, 1} = 252;T{ 1, 11, 5, 11, 1} = 462;T{ 1, 11, 5, 12, 1} = 792;T{ 1, 11, 5, 13, 1} = 1287;
T{ 1, 11, 5, 14, 1} = 2002;T{ 1, 11, 5, 15, 1} = 2981;T{ 1, 11, 5, 16, 1} = 3696;T{ 1, 11, 5, 17, 1} = 5236;
T{ 1, 12, 5, 10, 1} = 252;T{ 1, 12, 5, 11, 1} = 462;T{ 1, 12, 5, 12, 1} = 792;T{ 1, 12, 5, 13, 1} = 1287;
T{ 1, 12, 5, 14, 1} = 2002;T{ 1, 12, 5, 15, 1} = 3003;T{ 1, 12, 5, 16, 1} = 4032;
T{ 1, 13, 5, 10, 1} = 252;T{ 1, 13, 5, 11, 1} = 462;T{ 1, 13, 5, 12, 1} = 792;T{ 1, 13, 5, 13, 1} = 1287;
T{ 1, 13, 5, 14, 1} = 2002;T{ 1, 13, 5, 15, 1} = 3003;
T{ 1, 14, 5, 10, 1} = 252;T{ 1, 14, 5, 11, 1} = 462;T{ 1, 14, 5, 12, 1} = 792;T{ 1, 14, 5, 13, 1} = 1287;
T{ 1, 14, 5, 14, 1} = 2002;
T{ 1, 15, 5, 10, 1} = 252;T{ 1, 15, 5, 11, 1} = 462;T{ 1, 15, 5, 12, 1} = 792;T{ 1, 15, 5, 13, 1} = 1287;
T{ 1, 16, 5, 10, 1} = 252;T{ 1, 16, 5, 11, 1} = 462;T{ 1, 16, 5, 12, 1} = 792;
T{ 1, 17, 5, 10, 1} = 252;T{ 1, 17, 5, 11, 1} = 462;
T{ 1, 18, 5, 10, 1} = 252;
T{ 1, 2, 6, 12, 1} = 264; T{ 1, 2, 6, 13, 1} = 364;T{ 1, 2, 6, 14, 1} = 616;T{ 1, 2, 6, 15, 1} = 910;T{ 1, 2, 6, 16, 1} = 1444; T{ 1, 2, 6, 17, 1} = 1904;
T{ 1, 2, 6, 18, 1} = 2856;T{ 1, 2, 6, 19, 1} = 3578;T{ 1, 2, 6, 20, 1} = 5012;T{ 1, 2, 6, 21, 1} = 6384;T{ 1, 2, 6, 22, 1} = 8778; T{ 1, 2, 6, 23, 1} = 10626;
T{ 1, 2, 6, 24, 1} = 14168;T{ 1, 2, 6, 25, 1} = 16758;T{ 1, 2, 6, 26, 1} = 21580;
T{ 1, 3, 6, 12, 1} = 396; T{ 1, 3, 6, 13, 1} = 546;T{ 1, 3, 6, 14, 1} = 924;T{ 1, 3, 6, 15, 1} = 1365;T{ 1, 3, 6, 16, 1} = 2166; T{ 1, 3, 6, 17, 1} = 2856;
T{ 1, 3, 6, 18, 1} = 4284;T{ 1, 3, 6, 19, 1} = 5367;T{ 1, 3, 6, 20, 1} = 7518;T{ 1, 3, 6, 21, 1} = 9576;T{ 1, 3, 6, 22, 1} = 13167; T{ 1, 3, 6, 23, 1} = 15939;
T{ 1, 3, 6, 24, 1} = 21252;T{ 1, 3, 6, 25, 1} = 25137;
T{ 1, 4, 6, 12, 1} = 528; T{ 1, 4, 6, 13, 1} = 728;T{ 1, 4, 6, 14, 1} = 1232;T{ 1, 4, 6, 15, 1} = 1820;T{ 1, 4, 6, 16, 1} = 2888; T{ 1, 4, 6, 17, 1} = 3808;
T{ 1, 4, 6, 18, 1} = 5712;T{ 1, 4, 6, 19, 1} = 7156;T{ 1, 4, 6, 20, 1} = 10024;T{ 1, 4, 6, 21, 1} = 12768;T{ 1, 4, 6, 22, 1} = 17556; T{ 1, 4, 6, 23, 1} = 21252;
T{ 1, 4, 6, 24, 1} = 28336;
T{ 1, 5, 6, 12, 1} = 660; T{ 1, 5, 6, 13, 1} = 910;T{ 1, 5, 6, 14, 1} = 1540;T{ 1, 5, 6, 15, 1} = 2275;T{ 1, 5, 6, 16, 1} = 3610; T{ 1, 5, 6, 17, 1} = 4760;
T{ 1, 5, 6, 18, 1} = 7140;T{ 1, 5, 6, 19, 1} = 8945;T{ 1, 5, 6, 20, 1} = 12530;T{ 1, 5, 6, 21, 1} = 15960;T{ 1, 5, 6, 22, 1} = 21945; T{ 1, 5, 6, 23, 1} = 26565;
T{ 1, 6, 6, 12, 1} = 792; T{ 1, 6, 6, 13, 1} = 1092;T{ 1, 6, 6, 14, 1} = 1848;T{ 1, 6, 6, 15, 1} = 2730;T{ 1, 6, 6, 16, 1} = 4332; T{ 1, 6, 6, 17, 1} = 5712;
T{ 1, 6, 6, 18, 1} = 8568;T{ 1, 6, 6, 19, 1} = 10734;T{ 1, 6, 6, 20, 1} = 15036;T{ 1, 6, 6, 21, 1} = 19152;T{ 1, 6, 6, 22, 1} = 26334;
T{ 1, 7, 6, 12, 1} = 924; T{ 1, 7, 6, 13, 1} = 1274;T{ 1, 7, 6, 14, 1} = 2156;T{ 1, 7, 6, 15, 1} = 3185;T{ 1, 7, 6, 16, 1} = 5054; T{ 1, 7, 6, 17, 1} = 6664;
T{ 1, 7, 6, 18, 1} = 9996;T{ 1, 7, 6, 19, 1} = 12523;T{ 1, 7, 6, 20, 1} = 17542;T{ 1, 7, 6, 21, 1} = 22344;
T{ 1, 8, 6, 12, 1} = 924; T{ 1, 8, 6, 13, 1} = 1456;T{ 1, 8, 6, 14, 1} = 2464;T{ 1, 8, 6, 15, 1} = 3640;T{ 1, 8, 6, 16, 1} = 5776; T{ 1, 8, 6, 17, 1} = 7616;
T{ 1, 8, 6, 18, 1} = 11424;T{ 1, 8, 6, 19, 1} = 14312;T{ 1, 8, 6, 20, 1} = 20048;
T{ 1, 9, 6, 12, 1} = 924; T{ 1, 9, 6, 13, 1} = 1638;T{ 1, 9, 6, 14, 1} = 2772;T{ 1, 9, 6, 15, 1} = 4095;T{ 1, 9, 6, 16, 1} = 6498; T{ 1, 9, 6, 17, 1} = 8568;
T{ 1, 9, 6, 18, 1} = 12852;T{ 1, 9, 6, 19, 1} = 16101;
T{ 1, 10, 6, 12, 1} = 924; T{ 1, 10, 6, 13, 1} = 1716;T{ 1, 10, 6, 14, 1} = 3003;T{ 1, 10, 6, 15, 1} = 4550;T{ 1, 10, 6, 16, 1} = 7220; T{ 1, 10, 6, 17, 1} = 9520;
T{ 1, 10, 6, 18, 1} = 14280;
T{ 1, 11, 6, 12, 1} = 924; T{ 1, 11, 6, 13, 1} = 1716;T{ 1, 11, 6, 14, 1} = 3003;T{ 1, 11, 6, 15, 1} = 5005;T{ 1, 11, 6, 16, 1} = 7942; T{ 1, 11, 6, 17, 1} = 10472;
T{ 1, 12, 6, 12, 1} = 924; T{ 1, 12, 6, 13, 1} = 1716;T{ 1, 12, 6, 14, 1} = 3003;T{ 1, 12, 6, 15, 1} = 5005;T{ 1, 12, 6, 16, 1} = 8008;
T{ 1, 13, 6, 12, 1} = 924; T{ 1, 13, 6, 13, 1} = 1716;T{ 1, 13, 6, 14, 1} = 3003;T{ 1, 13, 6, 15, 1} = 5005;
T{ 1, 14, 6, 12, 1} = 924; T{ 1, 14, 6, 13, 1} = 1716;T{ 1, 14, 6, 14, 1} = 3003;
T{ 1, 15, 6, 12, 1} = 924; T{ 1, 15, 6, 13, 1} = 1716;
T{ 1, 16, 6, 12, 1} = 924;
T{ 1, 2, 7, 14, 1} = 728;T{ 1, 2, 7, 15, 1} = 1320;T{ 1, 2, 7, 16, 1} = 2080; T{ 1, 2, 7, 17, 1} = 3506;T{ 1, 2, 7, 18, 1} = 4896;T{ 1, 2, 7, 19, 1} = 7752;
T{ 1, 2, 7, 20, 1} = 10222;T{ 1, 2, 7, 21, 1} = 15036;T{ 1, 2, 7, 22, 1} = 20064; T{ 1, 2, 7, 23, 1} = 28842;T{ 1, 2, 7, 24, 1} = 36432;T{ 1, 2, 7, 25, 1} = 50600;
T{ 1, 2, 7, 26, 1} = 62244;
T{ 1, 3, 7, 14, 1} = 1092;T{ 1, 3, 7, 15, 1} = 1980;T{ 1, 3, 7, 16, 1} = 3120; T{ 1, 3, 7, 17, 1} = 5259;T{ 1, 3, 7, 18, 1} = 7344;T{ 1, 3, 7, 19, 1} = 11628;
T{ 1, 3, 7, 20, 1} = 15333;T{ 1, 3, 7, 21, 1} = 22554;T{ 1, 3, 7, 22, 1} = 30096; T{ 1, 3, 7, 23, 1} = 43263;T{ 1, 3, 7, 24, 1} = 54648;T{ 1, 3, 7, 25, 1} = 75900;
T{ 1, 4, 7, 14, 1} = 1456;T{ 1, 4, 7, 15, 1} = 2640;T{ 1, 4, 7, 16, 1} = 4160; T{ 1, 4, 7, 17, 1} = 7012;T{ 1, 4, 7, 18, 1} = 9792;T{ 1, 4, 7, 19, 1} = 15504;
T{ 1, 4, 7, 20, 1} = 20444;T{ 1, 4, 7, 21, 1} = 30072;T{ 1, 4, 7, 22, 1} = 40128; T{ 1, 4, 7, 23, 1} = 57684;T{ 1, 4, 7, 24, 1} = 72864;
T{ 1, 5, 7, 14, 1} = 1820;T{ 1, 5, 7, 15, 1} = 3300;T{ 1, 5, 7, 16, 1} = 5200; T{ 1, 5, 7, 17, 1} = 8765;T{ 1, 5, 7, 18, 1} = 12240;T{ 1, 5, 7, 19, 1} = 19380;
T{ 1, 5, 7, 20, 1} = 25555;T{ 1, 5, 7, 21, 1} = 37590;T{ 1, 5, 7, 22, 1} = 50160; T{ 1, 5, 7, 23, 1} = 72105;
T{ 1, 6, 7, 14, 1} = 2184;T{ 1, 6, 7, 15, 1} = 3960;T{ 1, 6, 7, 16, 1} = 6240; T{ 1, 6, 7, 17, 1} = 10518;T{ 1, 6, 7, 18, 1} = 14688;T{ 1, 6, 7, 19, 1} = 23256;
T{ 1, 6, 7, 20, 1} = 30666;T{ 1, 6, 7, 21, 1} = 45108;T{ 1, 6, 7, 22, 1} = 60192;
T{ 1, 7, 7, 14, 1} = 2548;T{ 1, 7, 7, 15, 1} = 4620;T{ 1, 7, 7, 16, 1} = 7280; T{ 1, 7, 7, 17, 1} = 12271;T{ 1, 7, 7, 18, 1} = 17136;T{ 1, 7, 7, 19, 1} = 27132;
T{ 1, 7, 7, 20, 1} = 35777;T{ 1, 7, 7, 21, 1} = 52626;
T{ 1, 8, 7, 14, 1} = 2912;T{ 1, 8, 7, 15, 1} = 5280;T{ 1, 8, 7, 16, 1} = 8320; T{ 1, 8, 7, 17, 1} = 14024;T{ 1, 8, 7, 18, 1} = 19584;T{ 1, 8, 7, 19, 1} = 31008;
T{ 1, 8, 7, 20, 1} = 40888;
T{ 1, 9, 7, 14, 1} = 3276;T{ 1, 9, 7, 15, 1} = 5940;T{ 1, 9, 7, 16, 1} = 9360; T{ 1, 9, 7, 17, 1} = 15777;T{ 1, 9, 7, 18, 1} = 22032;T{ 1, 9, 7, 19, 1} = 34884;
T{ 1, 10, 7, 14, 1} = 3432;T{ 1, 10, 7, 15, 1} = 6435;T{ 1, 10, 7, 16, 1} = 10400; T{ 1, 10, 7, 17, 1} = 175530;T{ 1, 10, 7, 18, 1} = 24480;
T{ 1, 11, 7, 14, 1} = 3432;T{ 1, 11, 7, 15, 1} = 6435;T{ 1, 11, 7, 16, 1} = 11440; T{ 1, 11, 7, 17, 1} = 19283;
T{ 1, 12, 7, 14, 1} = 3432;T{ 1, 12, 7, 15, 1} = 6435;T{ 1, 12, 7, 16, 1} = 11440; 
T{ 1, 13, 7, 14, 1} = 3432;T{ 1, 13, 7, 15, 1} = 6435;
T{ 1, 14, 7, 14, 1} = 3432;
T{ 1, 2, 8, 16, 1} = 2640; T{ 1, 2, 8, 17, 1} = 4420;T{ 1, 2, 8, 18, 1} = 7888;T{ 1, 2, 8, 19, 1} = 11628;T{ 1, 2, 8, 20, 1} = 19380;T{ 1, 2, 8, 21, 1} = 26832;
T{ 1, 2, 8, 22, 1} = 41348; T{ 1, 2, 8, 23, 1} = 57684;T{ 1, 2, 8, 24, 1} = 86526;T{ 1, 2, 8, 25, 1} = 113850;T{ 1, 2, 8, 26, 1} = 164450;
T{ 1, 3, 8, 16, 1} = 3960; T{ 1, 3, 8, 17, 1} = 6630;T{ 1, 3, 8, 18, 1} = 11832;T{ 1, 3, 8, 19, 1} = 17442;T{ 1, 3, 8, 20, 1} = 29070;T{ 1, 3, 8, 21, 1} = 40248;
T{ 1, 3, 8, 22, 1} = 62022; T{ 1, 3, 8, 23, 1} = 86526;T{ 1, 3, 8, 24, 1} = 129789;T{ 1, 3, 8, 25, 1} = 170775;
T{ 1, 4, 8, 16, 1} = 5280; T{ 1, 4, 8, 17, 1} = 8840;T{ 1, 4, 8, 18, 1} = 15776;T{ 1, 4, 8, 19, 1} = 23256;T{ 1, 4, 8, 20, 1} = 38760;T{ 1, 4, 8, 21, 1} = 53664;
T{ 1, 4, 8, 22, 1} = 82696; T{ 1, 4, 8, 23, 1} = 115368;T{ 1, 4, 8, 24, 1} = 173052;
T{ 1, 5, 8, 16, 1} = 6600; T{ 1, 5, 8, 17, 1} = 11050;T{ 1, 5, 8, 18, 1} = 19720;T{ 1, 5, 8, 19, 1} = 29070;T{ 1, 5, 8, 20, 1} = 48450;T{ 1, 5, 8, 21, 1} = 67080;
T{ 1, 5, 8, 22, 1} = 103370; T{ 1, 5, 8, 23, 1} = 144210;
T{ 1, 6, 8, 16, 1} = 7920; T{ 1, 6, 8, 17, 1} = 13260;T{ 1, 6, 8, 18, 1} = 23664;T{ 1, 6, 8, 19, 1} = 34884;T{ 1, 6, 8, 20, 1} = 58140;T{ 1, 6, 8, 21, 1} = 80496;
T{ 1, 6, 8, 22, 1} = 124044;
T{ 1, 7, 8, 16, 1} = 9240; T{ 1, 7, 8, 17, 1} = 15470;T{ 1, 7, 8, 18, 1} = 27608;T{ 1, 7, 8, 19, 1} = 40698;T{ 1, 7, 8, 20, 1} = 67830;T{ 1, 7, 8, 21, 1} = 93912;
T{ 1, 8, 8, 16, 1} = 10560; T{ 1, 8, 8, 17, 1} = 17680;T{ 1, 8, 8, 18, 1} = 31552;T{ 1, 8, 8, 19, 1} = 46512;T{ 1, 8, 8, 20, 1} = 77520;
T{ 1, 9, 8, 16, 1} = 11880; T{ 1, 9, 8, 17, 1} = 19890;T{ 1, 9, 8, 18, 1} = 35496;T{ 1, 9, 8, 19, 1} = 52326;
T{ 1, 10, 8, 16, 1} = 12870; T{ 1, 10, 8, 17, 1} = 22100;T{ 1, 10, 8, 18, 1} = 39440;
T{ 1, 11, 8, 16, 1} = 12870; T{ 1, 11, 8, 17, 1} = 24310;
T{ 1, 12, 8, 16, 1} = 12870;
T{ 1, 2, 9, 18, 1} = 8840;T{ 1, 2, 9, 19, 1} = 16652;T{ 1, 2, 9, 20, 1} = 25840;T{ 1, 2, 9, 21, 1} = 45220;T{ 1, 2, 9, 22, 1} = 65588; T{ 1, 2, 9, 23, 1} = 105666;
T{ 1, 2, 9, 24, 1} = 153824;T{ 1, 2, 9, 25, 1} = 240350;T{ 1, 2, 9, 26, 1} = 328900;
T{ 1, 3, 9, 18, 1} = 13260;T{ 1, 3, 9, 19, 1} = 24978;T{ 1, 3, 9, 20, 1} = 38760;T{ 1, 3, 9, 21, 1} = 67830;T{ 1, 3, 9, 22, 1} = 98382; T{ 1, 3, 9, 23, 1} = 158499;
T{ 1, 3, 9, 24, 1} = 230736;T{ 1, 3, 9, 25, 1} = 360525;
T{ 1, 4, 9, 18, 1} = 17680;T{ 1, 4, 9, 19, 1} = 33304;T{ 1, 4, 9, 20, 1} = 51680;T{ 1, 4, 9, 21, 1} = 90440;T{ 1, 4, 9, 22, 1} = 131176; T{ 1, 4, 9, 23, 1} = 211332;
T{ 1, 4, 9, 24, 1} = 307648;
T{ 1, 5, 9, 18, 1} = 22100;T{ 1, 5, 9, 19, 1} = 41630;T{ 1, 5, 9, 20, 1} = 64600;T{ 1, 5, 9, 21, 1} = 113050;T{ 1, 5, 9, 22, 1} = 163970; T{ 1, 5, 9, 23, 1} = 264165;
T{ 1, 6, 9, 18, 1} = 26520;T{ 1, 6, 9, 19, 1} = 49956;T{ 1, 6, 9, 20, 1} = 77520;T{ 1, 6, 9, 21, 1} = 135660;T{ 1, 6, 9, 22, 1} = 196764;
T{ 1, 7, 9, 18, 1} = 30940;T{ 1, 7, 9, 19, 1} = 58282;T{ 1, 7, 9, 20, 1} = 90440;T{ 1, 7, 9, 21, 1} = 158270;
T{ 1, 8, 9, 18, 1} = 35360;T{ 1, 8, 9, 19, 1} = 66608;T{ 1, 8, 9, 20, 1} = 103360;
T{ 1, 9, 9, 18, 1} = 39780;T{ 1, 9, 9, 19, 1} = 74934;
T{ 1, 10, 9, 18, 1} = 44200;
T{ 1, 2, 10, 20, 1} = 33304;T{ 1, 2, 10, 21, 1} = 54264;T{ 1, 2, 10, 22, 1} = 99484; T{ 1, 2, 10, 23, 1} = 150852;T{ 1, 2, 10, 24, 1} = 253598;T{ 1, 2, 10, 25, 1} = 384560;
T{ 1, 2, 10, 26, 1} = 328900;
T{ 1, 3, 10, 20, 1} = 49956;T{ 1, 3, 10, 21, 1} = 81396;T{ 1, 3, 10, 22, 1} = 149226; T{ 1, 3, 10, 23, 1} = 226278;T{ 1, 3, 10, 24, 1} = 380397;T{ 1, 3, 10, 25, 1} = 576840;
T{ 1, 4, 10, 20, 1} = 66608;T{ 1, 4, 10, 21, 1} = 108528;T{ 1, 4, 10, 22, 1} = 198968; T{ 1, 4, 10, 23, 1} = 301704;T{ 1, 4, 10, 24, 1} = 507196;
T{ 1, 5, 10, 20, 1} = 83260;T{ 1, 5, 10, 21, 1} = 135660;T{ 1, 5, 10, 22, 1} = 248710; T{ 1, 5, 10, 23, 1} = 377130;
T{ 1, 6, 10, 20, 1} = 99912;T{ 1, 6, 10, 21, 1} = 162792;T{ 1, 6, 10, 22, 1} = 298452;
T{ 1, 7, 10, 20, 1} = 116564;T{ 1, 7, 10, 21, 1} = 189924;
T{ 1, 8, 10, 20, 1} = 133216;
T{ 1, 2, 11, 22, 1} = 108528; T{ 1, 2, 11, 23, 1} = 208012;T{ 1, 2, 11, 24, 1} = 329130;T{ 1, 2, 11, 25, 1} = 576358;T{ 1, 2, 11, 26, 1} = 908960;
T{ 1, 3, 11, 22, 1} = 162792; T{ 1, 3, 11, 23, 1} = 312018;T{ 1, 3, 11, 24, 1} = 493695;T{ 1, 3, 11, 25, 1} = 864537;
T{ 1, 4, 11, 22, 1} = 217056; T{ 1, 4, 11, 23, 1} = 416024;T{ 1, 4, 11, 24, 1} = 658260;
T{ 1, 5, 11, 22, 1} = 271320; T{ 1, 5, 11, 23, 1} = 520030;
T{ 1, 6, 11, 22, 1} = 325584;
T{ 1, 2, 12, 24, 1} = 416024;T{ 1, 2, 12, 25, 1} = 685686;T{ 1, 2, 12, 26, 1} = 1248774;
T{ 1, 3, 12, 24, 1} = 624036;T{ 1, 3, 12, 25, 1} = 1028529;
T{ 1, 4, 12, 24, 1} = 832048;
T{ 1, 2, 13, 26, 1} = 1371372;
T{ 2, 4, 2, 4, 1} = 12;T{ 2, 4, 2, 5, 1} = 12;T{ 2, 4, 2, 6, 1} = 18;T{ 2, 4, 2, 7, 1} = 18;T{ 2, 4, 2, 8, 1} = 24;T{ 2, 4, 2, 9, 1} = 24;T{ 2, 4, 2, 10, 1} = 30; 
T{ 2, 4, 2, 11, 1} = 30;T{ 2, 4, 2, 12, 1} = 36;T{ 2, 4, 2, 13, 1} = 36;T{ 2, 4, 2, 14, 1} = 42;T{ 2, 4, 2, 15, 1} = 42;T{ 2, 4, 2, 16, 1} = 48;T{ 2, 4, 2, 17, 1} = 48; 
T{ 2, 4, 2, 18, 1} = 54;T{ 2, 4, 2, 19, 1} = 54;T{ 2, 4, 2, 20, 1} = 60;T{ 2, 4, 2, 21, 1} = 60;T{ 2, 4, 2, 22, 1} = 66;T{ 2, 4, 2, 23, 1} = 66;T{ 2, 4, 2, 24, 1} = 72;
T{ 2, 5, 2, 5, 1} = 20;T{ 2, 5, 2, 6, 1} = 30;T{ 2, 5, 2, 7, 1} = 30;T{ 2, 5, 2, 8, 1} = 40;T{ 2, 5, 2, 9, 1} = 40;T{ 2, 5, 2, 10, 1} = 50; T{ 2, 5, 2, 11, 1} = 50;
T{ 2, 5, 2, 12, 1} = 60;T{ 2, 5, 2, 13, 1} = 60;T{ 2, 5, 2, 14, 1} = 70;T{ 2, 5, 2, 15, 1} = 70;T{ 2, 5, 2, 16, 1} = 80;T{ 2, 5, 2, 17, 1} = 80; T{ 2, 5, 2, 18, 1} = 90;
T{ 2, 5, 2, 19, 1} = 90;T{ 2, 5, 2, 20, 1} = 100;T{ 2, 5, 2, 21, 1} = 100;T{ 2, 5, 2, 22, 1} = 110;T{ 2, 5, 2, 23, 1} = 110;
T{ 2, 6, 2, 6, 1} = 45;T{ 2, 6, 2, 7, 1} = 45;T{ 2, 6, 2, 8, 1} = 60;T{ 2, 6, 2, 9, 1} = 60;T{ 2, 6, 2, 10, 1} = 75; T{ 2, 6, 2, 11, 1} = 75;T{ 2, 6, 2, 12, 1} = 90;
T{ 2, 6, 2, 13, 1} = 90;T{ 2, 6, 2, 14, 1} = 105;T{ 2, 6, 2, 15, 1} = 105;T{ 2, 6, 2, 16, 1} = 120;T{ 2, 6, 2, 17, 1} = 120; T{ 2, 6, 2, 18, 1} = 135;T{ 2, 6, 2, 19, 1} = 135;
T{ 2, 6, 2, 20, 1} = 150;T{ 2, 6, 2, 21, 1} = 150;T{ 2, 6, 2, 22, 1} = 165;
T{ 2, 7, 2, 7, 1} = 63;T{ 2, 7, 2, 8, 1} = 84;T{ 2, 7, 2, 9, 1} = 84;T{ 2, 7, 2, 10, 1} = 105; T{ 2, 7, 2, 11, 1} = 105;T{ 2, 7, 2, 12, 1} = 126;T{ 2, 7, 2, 13, 1} = 126;
T{ 2, 7, 2, 14, 1} = 147;T{ 2, 7, 2, 15, 1} = 147;T{ 2, 7, 2, 16, 1} = 168;T{ 2, 7, 2, 17, 1} = 168; T{ 2, 7, 2, 18, 1} = 189;T{ 2, 7, 2, 19, 1} = 189;
T{ 2, 7, 2, 20, 1} = 210;T{ 2, 7, 2, 21, 1} = 210;
T{ 2, 8, 2, 8, 1} = 112;T{ 2, 8, 2, 9, 1} = 112;T{ 2, 8, 2, 10, 1} = 140; T{ 2, 8, 2, 11, 1} = 140;T{ 2, 8, 2, 12, 1} = 168;T{ 2, 8, 2, 13, 1} = 168;T{ 2, 8, 2, 14, 1} = 196;
T{ 2, 8, 2, 15, 1} = 196;T{ 2, 8, 2, 16, 1} = 224;T{ 2, 8, 2, 17, 1} = 224; T{ 2, 8, 2, 18, 1} = 252;T{ 2, 8, 2, 19, 1} = 252;T{ 2, 8, 2, 20, 1} = 280;
T{ 2, 9, 2, 9, 1} = 144;T{ 2, 9, 2, 10, 1} = 180; T{ 2, 9, 2, 11, 1} = 180;T{ 2, 9, 2, 12, 1} = 216;T{ 2, 9, 2, 13, 1} = 216;T{ 2, 9, 2, 14, 1} = 252;
T{ 2, 9, 2, 15, 1} = 252;T{ 2, 9, 2, 16, 1} = 288;T{ 2, 9, 2, 17, 1} = 288; T{ 2, 9, 2, 18, 1} = 324;T{ 2, 9, 2, 19, 1} = 324;
T{ 2, 10, 2, 10, 1} = 225; T{ 2, 10, 2, 11, 1} = 225;T{ 2, 10, 2, 12, 1} = 270;T{ 2, 10, 2, 13, 1} = 270;T{ 2, 10, 2, 14, 1} = 315;T{ 2, 10, 2, 15, 1} = 315;
T{ 2, 10, 2, 16, 1} = 360;T{ 2, 10, 2, 17, 1} = 360; T{ 2, 10, 2, 18, 1} = 405;
T{ 2, 11, 2, 11, 1} = 275;T{ 2, 11, 2, 12, 1} = 330;T{ 2, 11, 2, 13, 1} = 330;T{ 2, 11, 2, 14, 1} = 385;T{ 2, 11, 2, 15, 1} = 385;T{ 2, 11, 2, 16, 1} = 440;
T{ 2, 11, 2, 17, 1} = 440;
T{ 2, 12, 2, 12, 1} = 396;T{ 2, 12, 2, 13, 1} = 396;T{ 2, 12, 2, 14, 1} = 462;T{ 2, 12, 2, 15, 1} = 462;T{ 2, 12, 2, 16, 1} = 528;
T{ 2, 13, 2, 13, 1} = 468;T{ 2, 13, 2, 14, 1} = 546;T{ 2, 13, 2, 15, 1} = 546;
T{ 2, 14, 2, 14, 1} = 637;
T{ 2, 4, 3, 6, 4} = 24;T{ 2, 4, 3, 7, 4} = 42;T{ 2, 4, 3, 8, 4} = 48;T{ 2, 4, 3, 9, 4} = 72;T{ 2, 4, 3, 10, 4} = 78;T{ 2, 4, 3, 11, 4} = 102;T{ 2, 4, 3, 12, 4} = 120;
T{ 2, 4, 3, 13, 4} = 156;T{ 2, 4, 3, 14, 4} = 168;T{ 2, 4, 3, 15, 4} = 210;T{ 2, 4, 3, 16, 4} = 222;T{ 2, 4, 3, 17, 4} = 264;T{ 2, 4, 3, 18, 4} = 288;T{ 2, 4, 3, 19, 4} = 342;
T{ 2, 4, 3, 20, 4} = 360;T{ 2, 4, 3, 21, 4} = 420;T{ 2, 4, 3, 22, 4} = 438;T{ 2, 4, 3, 23, 4} = 498;T{ 2, 4, 3, 24, 4} = 528;
T{ 2, 5, 3, 6, 4} = 40;T{ 2, 5, 3, 7, 4} = 70;T{ 2, 5, 3, 8, 4} = 80;T{ 2, 5, 3, 9, 4} = 120;T{ 2, 5, 3, 10, 4} = 130;T{ 2, 5, 3, 11, 4} = 170;T{ 2, 5, 3, 12, 4} = 200;
T{ 2, 5, 3, 13, 4} = 260;T{ 2, 5, 3, 14, 4} = 280;T{ 2, 5, 3, 15, 4} = 350;T{ 2, 5, 3, 16, 4} = 370;T{ 2, 5, 3, 17, 4} = 440;T{ 2, 5, 3, 18, 4} = 480;T{ 2, 5, 3, 19, 4} = 570;
T{ 2, 5, 3, 20, 4} = 600;T{ 2, 5, 3, 21, 4} = 700;T{ 2, 5, 3, 22, 4} = 730;T{ 2, 5, 3, 23, 4} = 830;
T{ 2, 6, 3, 6, 4} = 60;T{ 2, 6, 3, 7, 4} = 105;T{ 2, 6, 3, 8, 4} = 120;T{ 2, 6, 3, 9, 4} = 180;T{ 2, 6, 3, 10, 4} = 195;T{ 2, 6, 3, 11, 4} = 255;T{ 2, 6, 3, 12, 4} = 300;
T{ 2, 6, 3, 13, 4} = 390;T{ 2, 6, 3, 14, 4} = 420;T{ 2, 6, 3, 15, 4} = 525;T{ 2, 6, 3, 16, 4} = 555;T{ 2, 6, 3, 17, 4} = 660;T{ 2, 6, 3, 18, 4} = 720;T{ 2, 6, 3, 19, 4} = 855;
T{ 2, 6, 3, 20, 4} = 900;T{ 2, 6, 3, 21, 4} = 1050;T{ 2, 6, 3, 22, 4} = 1095;
T{ 2, 7, 3, 6, 4} = 60;T{ 2, 7, 3, 7, 4} = 105;T{ 2, 7, 3, 8, 4} = 168;T{ 2, 7, 3, 9, 4} = 252;T{ 2, 7, 3, 10, 4} = 273;T{ 2, 7, 3, 11, 4} = 357;T{ 2, 7, 3, 12, 4} = 420;
T{ 2, 7, 3, 13, 4} = 546;T{ 2, 7, 3, 14, 4} = 588;T{ 2, 7, 3, 15, 4} = 735;T{ 2, 7, 3, 16, 4} = 777;T{ 2, 7, 3, 17, 4} = 924;T{ 2, 7, 3, 18, 4} = 1008;T{ 2, 7, 3, 19, 4} = 1197;
T{ 2, 7, 3, 20, 4} = 1260;T{ 2, 7, 3, 21, 4} = 1470;
T{ 2, 8, 3, 6, 4} = 80;T{ 2, 8, 3, 7, 4} = 140;T{ 2, 8, 3, 8, 4} = 224;T{ 2, 8, 3, 9, 4} = 336;T{ 2, 8, 3, 10, 4} = 364;T{ 2, 8, 3, 11, 4} = 476;T{ 2, 8, 3, 12, 4} = 560;
T{ 2, 8, 3, 13, 4} = 728;T{ 2, 8, 3, 14, 4} = 784;T{ 2, 8, 3, 15, 4} = 980;T{ 2, 8, 3, 16, 4} = 1036;T{ 2, 8, 3, 17, 4} = 1232;T{ 2, 8, 3, 18, 4} = 1344;T{ 2, 8, 3, 19, 4} = 1596;
T{ 2, 8, 3, 20, 4} = 1680;
T{ 2, 9, 3, 6, 4} = 80;T{ 2, 9, 3, 7, 4} = 140;T{ 2, 9, 3, 8, 4} = 224;T{ 2, 9, 3, 9, 4} = 336;T{ 2, 9, 3, 10, 4} = 468;T{ 2, 9, 3, 11, 4} = 612;T{ 2, 9, 3, 12, 4} = 720;
T{ 2, 9, 3, 13, 4} = 936;T{ 2, 9, 3, 14, 4} = 1008;T{ 2, 9, 3, 15, 4} = 1260;T{ 2, 9, 3, 16, 4} = 1332;T{ 2, 9, 3, 17, 4} = 1584;T{ 2, 9, 3, 18, 4} = 1728;
T{ 2, 9, 3, 19, 4} = 2052;
T{ 2, 10, 3, 6, 4} = 100;T{ 2, 10, 3, 7, 4} = 175;T{ 2, 10, 3, 8, 4} = 280;T{ 2, 10, 3, 9, 4} = 420;T{ 2, 10, 3, 10, 4} = 585;T{ 2, 10, 3, 11, 4} = 765;
T{ 2, 10, 3, 12, 4} = 900;T{ 2, 10, 3, 13, 4} = 1170;T{ 2, 10, 3, 14, 4} = 1260;T{ 2, 10, 3, 15, 4} = 1575;T{ 2, 10, 3, 16, 4} = 1665;T{ 2, 10, 3, 17, 4} = 1980;
T{ 2, 10, 3, 18, 4} = 2160;
T{ 2, 11, 3, 6, 4} = 100;T{ 2, 11, 3, 7, 4} = 175;T{ 2, 11, 3, 8, 4} = 280;T{ 2, 11, 3, 9, 4} = 420;T{ 2, 11, 3, 10, 4} = 600;T{ 2, 11, 3, 11, 4} = 825;
T{ 2, 11, 3, 12, 4} = 1100;T{ 2, 11, 3, 13, 4} = 1430;T{ 2, 11, 3, 14, 4} = 1540;T{ 2, 11, 3, 15, 4} = 1925;T{ 2, 11, 3, 16, 4} = 2035;T{ 2, 11, 3, 17, 4} = 2420;
T{ 2, 12, 3, 6, 4} = 120;T{ 2, 12, 3, 7, 4} = 210;T{ 2, 12, 3, 8, 4} = 336;T{ 2, 12, 3, 9, 4} = 504;T{ 2, 12, 3, 10, 4} = 720;T{ 2, 12, 3, 11, 4} = 990;
T{ 2, 12, 3, 12, 4} = 1320;T{ 2, 12, 3, 13, 4} = 1716;T{ 2, 12, 3, 14, 4} = 1848;T{ 2, 12, 3, 15, 4} = 2310;T{ 2, 12, 3, 16, 4} = 2442;
T{ 2, 13, 3, 6, 4} = 120;T{ 2, 13, 3, 7, 4} = 210;T{ 2, 13, 3, 8, 4} = 336;T{ 2, 13, 3, 9, 4} = 504;T{ 2, 13, 3, 10, 4} = 720;T{ 2, 13, 3, 11, 4} = 990;
T{ 2, 13, 3, 12, 4} = 1320;T{ 2, 13, 3, 13, 4} = 1716;T{ 2, 13, 3, 14, 4} = 2184;T{ 2, 13, 3, 15, 4} = 2730;
T{ 2, 14, 3, 6, 4} = 140;T{ 2, 14, 3, 7, 4} = 245;T{ 2, 14, 3, 8, 4} = 392;T{ 2, 14, 3, 9, 4} = 588;T{ 2, 14, 3, 10, 4} = 840;T{ 2, 14, 3, 11, 4} = 1155;
T{ 2, 14, 3, 12, 4} = 1540;T{ 2, 14, 3, 13, 4} = 2002;T{ 2, 14, 3, 14, 4} = 2548;
T{ 2, 15, 3, 6, 4} = 140;T{ 2, 15, 3, 7, 4} = 245;T{ 2, 15, 3, 8, 4} = 392;T{ 2, 15, 3, 9, 4} = 588;T{ 2, 15, 3, 10, 4} = 840;T{ 2, 15, 3, 11, 4} = 1155;
T{ 2, 15, 3, 12, 4} = 1540;T{ 2, 15, 3, 13, 4} = 2002;
T{ 2, 16, 3, 6, 4} = 160;T{ 2, 16, 3, 7, 4} = 280;T{ 2, 16, 3, 8, 4} = 448;T{ 2, 16, 3, 9, 4} = 672;T{ 2, 16, 3, 10, 4} = 960;T{ 2, 16, 3, 11, 4} = 1320;
T{ 2, 16, 3, 12, 4} = 1760;
T{ 2, 17, 3, 6, 4} = 160;T{ 2, 17, 3, 7, 4} = 280;T{ 2, 17, 3, 8, 4} = 448;T{ 2, 17, 3, 9, 4} = 672;T{ 2, 17, 3, 10, 4} = 960;T{ 2, 17, 3, 11, 4} = 1320;
T{ 2, 18, 3, 6, 4} = 180;T{ 2, 18, 3, 7, 4} = 315;T{ 2, 18, 3, 8, 4} = 504;T{ 2, 18, 3, 9, 4} = 756;T{ 2, 18, 3, 10, 4} = 1080;
T{ 2, 19, 3, 6, 4} = 180;T{ 2, 19, 3, 7, 4} = 315;T{ 2, 19, 3, 8, 4} = 504;T{ 2, 19, 3, 9, 4} = 756;
T{ 2, 20, 3, 6, 4} = 200;T{ 2, 20, 3, 7, 4} = 350;T{ 2, 20, 3, 8, 4} = 560;
T{ 2, 21, 3, 6, 4} = 200;T{ 2, 21, 3, 7, 4} = 350;
T{ 2, 22, 3, 6, 4} = 220;
T{ 2, 4, 4, 8, 4} = 84;T{ 2, 4, 4, 9, 4} = 108;T{ 2, 4, 4, 10, 4} = 180;T{ 2, 4, 4, 11, 4} = 210;T{ 2, 4, 4, 12, 4} = 306;T{ 2, 4, 4, 13, 4} = 390;T{ 2, 4, 4, 14, 4} = 546;
T{ 2, 4, 4, 15, 4} = 630;T{ 2, 4, 4, 16, 4} = 840;T{ 2, 4, 4, 17, 4} = 942;T{ 2, 4, 4, 18, 4} = 1188;T{ 2, 4, 4, 19, 4} = 1368;T{ 2, 4, 4, 20, 4} = 1710;
T{ 2, 4, 4, 21, 4} = 1890;T{ 2, 4, 4, 22, 4} = 2310;T{ 2, 4, 4, 23, 4} = 2514;T{ 2, 4, 4, 24, 4} = 2988;

T{ 2, 5, 4, 8, 4} = 140;T{ 2, 5, 4, 9, 4} = 180;T{ 2, 5, 4, 10, 4} = 300;T{ 2, 5, 4, 11, 4} = 350;T{ 2, 5, 4, 12, 4} = 510;T{ 2, 5, 4, 13, 4} = 650;T{ 2, 5, 4, 14, 4} = 910;
T{ 2, 5, 4, 15, 4} = 1050;T{ 2, 5, 4, 16, 4} = 1400;T{ 2, 5, 4, 17, 4} = 1570;T{ 2, 5, 4, 18, 4} = 1980;T{ 2, 5, 4, 19, 4} = 2280;T{ 2, 5, 4, 20, 4} = 2850;
T{ 2, 5, 4, 21, 4} = 3150;T{ 2, 5, 4, 22, 4} = 3850;T{ 2, 5, 4, 23, 4} = 4190;

%140 180 300 350 510 650 910 1050 1400 1570 1980 2280 2850 3150 3850 4190

T = cell(13, 26, 13, 26, 5);
for i = 1: 13
    for j = 1: 26
        for i_1 = 1: 13
            for j_1 = 1: 26
                for k = 1: 5
                    if T{i, j, i_1, j_1, k} == 0
                        if T{i_1, j_1, i, j, k} ~= 0
                            T{i, j, i_1, j_1, k} = T{i_1, j_1, i, j, k};
                        end
                    end
                end
            end
        end
    end
end

clear i j i_1 j_1 k;


sdp = 1; %0: off, 1: on
sp_sdp = 1; %0: off, 1: on
Eq_25 = 1; %0: off, 1: on
Best = 1; %0: off, 1: on
LP = 0; %0: off, 1: on
SLP = 0; %0: off, 1: on
Eq_18 = 1; %0: off, 1: on
Eq_19 = 1; %0: off, 1: on
Double = 1; %0: off, 1: on
init_sdp = 0; %sdp initial matrix
init_3 = 0; %sp_sdp initial matrix
init_4 = 0;
forbidden_2 = ["0"];
if init_sdp > 0
    LP = 1;
end
if init_3 > 0 || init_4 > 0 || forbidden_2(1) ~= ["0"]
    SLP = 1;
end
res = cell(6, 30);
order_obj = 10^(0);
order_sdp = 10^(0);
order = 10^(0);
start_n = 6;
end_n = 19;
for n = start_n: end_n;
    for d = [4, 6];%, 8, 10, 12];
        if d <= n
            if d == 4
                key = cell_4{n-d+1};
                key_1 = cell_c_4{n-d+1};
            end
            if d == 6
                key = cell_6{n-d+1};
                key_1 = cell_c_6{n-d+1};
            end
            if d == 8
                key = cell_8{n-d+1};
                key_1 = cell_c_8{n-d+1};
            end
            if d == 10
                key = cell_10{n-d+1};
                key_1 = cell_c_10{n-d+1};
            end
            if d == 12
                key = cell_12{n-d+1};
                key_1 = cell_c_12{n-d+1};
            end
            P = key(1);
            E = key(2);
            R = key(3);
            %n_1 = 3, 13103
            value = [];
            error_list = [];
            upper_bound = [];
            sp_part_start = 0;
            sp_part_end = floor(n/2);
            if sp_sdp == 0
                sp_part_start = 0;
                sp_part_end = 0;
            end
            for n_1 = sp_part_start: sp_part_end
                n_2 = n-n_1;
                [num, box] = num_var(n_1, n_2, d);


                disp("number of variables");
                disp(num);

                cvx_clear

                %count the number of constraints
                numbers = 0;
                list_l = ["0"];
                list_2 = ["0"];
                for i_1 = 0: n_1
                    disp(i_1);
                    for i_2 = 0: n_2
                        b = per_six(i_1, 0, 0, n_1, i_2, 0, 0, n_2, d);
                        B = sear(b, num, box);
                        for j_1 = 0: n_1
                            for j_2 = 0: n_2
                                c = per_six(0, j_1, 0, n_1, 0, j_2, 0, n_2, d);
                                C = sear(c, num, box);
                                for t_1 = 0: n_1
                                    for t_2 = 0: n_2
                                        a = per_six(i_1, j_1, t_1, n_1, i_2, j_2, t_2, n_2, d);
                                        A = sear(a, num, box);
                                        if A ~= -1
                                            if B ~= -1
                                                if ~ismember(string(A)+","+string(B), list_l)
                                                    numbers = numbers + 1;
                                                    list_l = [list_l, string(A)+","+string(B)];
                                                end
                                                if C ~= -1
                                                    if ~ismember(string(A)+","+string(B)+","+string(C), list_2)
                                                        numbers = numbers + 1;
                                                        list_2 = [list_2, string(A)+","+string(B)+","+string(C)];
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end

                clear list_l A B C a b i_1 j_1 t_1 i_2 j_2 t_2 list_2 C;
                
                number_sdp = 0;
                list_sdp = ["0"];
                list_sdp_2 = ["0"];
                for i = 0: n
                    b = per(i, 0, 0, n, d);
                    disp(i);
                    for j = 0: n
                        c = per(0, j, 0, n, d);
                        for t = 0: n
                            a = per(i, j, t, n, d);
                            if b ~= "N"
                                if a ~= "N"
                                    if ~ismember(a, list_sdp)
                                        number_sdp = number_sdp + 1;
                                        list_sdp = [list_sdp, a];
                                    end
                                    if c ~= "N"
                                        if ~ismember(a, list_sdp_2)
                                            number_sdp = number_sdp + 1;
                                            list_sdp_2 = [list_sdp_2, a];
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
                clear i j t list_sdp_2 list_sdp a b c;
                
                if Double == 1
                    dou = 0;
                    d_1 = (d / 2) - 1;
                    list_3 = ["0"];
                    for i = 0: n
                        for j = 0: n
                            for t = 0: n
                                if per(i, j, t, n, d) ~= "N"
                                    if ~ismember(string(i)+string(j)+string(t), list_3)
                                        if t*i*(j-t)*(n-i)*(i-t)*(n-i-j+t) > 0 
                                            if t >= floor(i/2)
                                                a = i-t;
                                            else
                                                a = t;
                                            end
                                            if j-t >= floor((n-i)/2)
                                                b = n-i-j+t;
                                            else
                                                b = j-t;
                                            end
                                            if T{a, i, b, n-i, d_1} ~= 0
                                                list_3 = [list_3, string(i)+string(j)+string(t)];
                                                dou = dou + 1;
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end

                    clear i j t list_3 d_1 a b;
                end
                cvx_begin sdp
                    cvx_precision('default')
                    %cvx_precision('high')
                    %cvx_precision('best')
                    %cvx_precision('medium')
                    %cvx_precision('low')
                    %cvx_precision([10^(-16), 10^(-16), 10^(-8)])
                    %cvx_solver sdpt3
                    %cvx_solver SeDuMi
                    cvx_solver MOSEK

                    variable x(num);
                    dual variable sdp_lin{1, number_sdp};
                    dual variable sdp_lin_d{1, numbers};
                    dual variable matrix_d{2, floor(n_1/2)+1, floor(n_2/2)+1};
                    dual variable matrix_d_sdp{2, floor(n/2)+1}
                    dual variable Eq_25_d{1, 14};
                    dual variable Best_le_5_d{1, 1};
                    dual variable Best_le_7_d{1, n-1};
                    dual variable Eq_18_d{1, 1};
                    dual variable Eq_19_d{1, 13};
                    dual variable LP_d{1, n+1};
                    dual variable SLP_d{n_1+1, n_2+1}
                    if Double == 1
                        dual variable Do{1, dou}
                    end

                    object = cvx(zeros(1, n+1));
                    K_prin = cvx(zeros(n_1+1, n_2+1));
                    for a = 0: n
                        if mod(a, 2) == 0
                            for i_1 = 0: n_1
                                for i_2 = 0: n_2
                                    if i_1 + i_2 == a
                                        c = per_six(i_1, 0, 0, n_1, i_2, 0, 0, n_2, d);
                                        C = sear(c, num, box);
                                        if C ~= -1
                                            object(a+1) = object(a+1) + comb(n_1,i_1)*comb(n_2, i_2)*x(C);
                                            K_prin(i_1+1, i_2+1) = K_prin(i_1+1, i_2+1) + comb(n_1,i_1)*comb(n_2, i_2)*x(C);
                                        end
                                    end
                                end
                            end
                        end
                    end

                    clear a i_1 i_2 c C c_1 c_2;


                    maximize(sum(object)*order_obj)
                    subject to
                    %definition condition
                    x(1) == 1;

                    condition = [];


                    clear k;

                    %Schrijver's SDP
                    if sdp == 1
                        matrix_sdp = cell(2, floor(n/2)+1);
                        F_sdp = cell(2, floor(n/2)+1);
                        for k = init_sdp: floor(n/2)
                            disp("sdp:"+string(k));
                            [matrix_1, matrix_2, F_1, F_2] = generate(x, n_1, n_2, d, k, num, box, order_sdp);
                            matrix_d_sdp{1, k+1}: matrix_1 >= 0;
                            matrix_d_sdp{2, k+1}: matrix_2 - matrix_1 >= 0;
                            matrix_sdp{1, k+1} = matrix_1;
                            matrix_sdp{2, k+1} = matrix_2 - matrix_1;
                            F_sdp{1, k+1} = F_1;
                            F_sdp{2, k+1} = F_2;
                        end
                        clear k_1 k_2 a b c matrix_1 matrix_2 matrix_3 matrix_4 F_1 F_2 F_3 F_4;
                    end
                    
                    %split semidefinite matrices
                    if sp_sdp == 1
                        matrix = cell(2, floor(n_1/2)+1, floor(n_2/2)+1);
                        F = cell(2, floor(n_1/2)+1, floor(n_2/2)+1);
                        for k_1 = init_3: floor(n_1 / 2)
                            for k_2 = init_4: floor(n_2 / 2)
                                if ~ismember(string(k_1)+","+string(k_2), forbidden_2)
                                    text = ["(1, 1)"];
                                    num_bi = 1;
                                    for a = 1: n_1-2*k_1+1
                                        for b = 1: n_2-2*k_2+1
                                            c = "("+string(a)+", "+string(b)+")";
                                            if ~ismember(c, text)
                                                text = [text, c];
                                                num_bi = num_bi+1;
                                            end
                                        end
                                    end
                                    disp([k_1, k_2]);
                                    [matrix_3, matrix_4, F_3, F_4] = generate_1(x, n_1, n_2, k_1, k_2, num, box, d, num_bi, text, order);
                                    matrix_d{1, k_1+1, k_2+1}: matrix_3 >= 0;
                                    matrix_d{2, k_1+1, k_2+1}: matrix_4 - matrix_3 >= 0;
                                    matrix{1, k_1+1, k_2+1} = matrix_3;
                                    matrix{2, k_1+1, k_2+1} = matrix_4 - matrix_3;
                                    F{1, k_1+1, k_2+1} = F_3;
                                    F{2, k_1+1, k_2+1} = F_4;
                                end
                            end
                        end
                        clear k_1 k_2 a b c matrix_1 matrix_2 matrix_3 matrix_4 F_1 F_2 F_3 F_4;
                    end

                    %Split SDP's linear condition on (n, d)
                    number = 0;
                    lin = cell(numbers, num);
                    list_l = ["0"];
                    list_2 = ["0"];
                    for i = 1: numbers
                        for j = 1: num
                            lin{i, j} = 0;
                        end
                    end
                    clear i j;
                    for i_1 = 0: n_1
                        disp(i_1);
                        for i_2 = 0: n_2
                            b = per_six(i_1, 0, 0, n_1, i_2, 0, 0, n_2, d);
                            B = sear(b, num, box);
                            for j_1 = 0: n_1
                                for j_2 = 0: n_2
                                    c = per_six(0, j_1, 0, n_1, 0, j_2, 0, n_2, d);
                                    C = sear(c, num, box);
                                    for t_1 = 0: n_1
                                        for t_2 = 0: n_2
                                            a = per_six(i_1, j_1, t_1, n_1, i_2, j_2, t_2, n_2, d);
                                            A = sear(a, num, box);
                                            if A ~= -1
                                                if B ~= -1
                                                    x(A) >= 0; 
                                                    condition = [condition, x(A)];
                                                    if ~ismember(string(A)+","+string(B), list_l)
                                                        number = number + 1;
                                                        list_l = [list_l, string(A)+","+string(B)];
                                                        sdp_lin_d{1, number}: -x(A) + x(B) >= 0;
                                                        condition = [condition, -x(A) + x(B)];
                                                        lin{number, A} = - 1;
                                                        lin{number, B} = 1;
                                                    end
                                                    if C ~= -1
                                                        if ~ismember(string(A)+","+string(B)+","+string(C), list_2)
                                                            number = number + 1;
                                                            sdp_lin_d{1, number}: 1 + x(A) - x(B) - x(C) >= 0;
                                                            lin{number, A} = 1;
                                                            lin{number, B} = -1;
                                                            lin{number, C} = -1;
                                                            list_2 = [list_2, string(A)+","+string(B)+","+string(C)];
                                                            condition = [condition, 1+x(A)-x(B)-x(C)];
                                                        end
                                                    end
                                                else
                                                    x(A) == 0;
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end

                    clear i_1 i_2 j_1 j_2 t_1 t_2 a A b B c C number;

                    %equality from three indices variables to six indices variables.
                    number_s = 0;
                    lin_sdp = cell(number_sdp, num);
                    list_l = ["0"];
                    list_2 = ["0"];
                    for i = 1: number_s
                        for j = 1: num
                            lin_sdp{i, j} = 0;
                        end
                    end
                    clear i j;
                    for a = 0: n
                        Z_1 = per(a, 0, 0, n, d);
                        if Z_1 ~= "N"
                            Z_2 = split(Z_1, ",");
                            D = double(Z_2(1));
                            G = double(Z_2(2));
                            Z = double(Z_2(3));
                        end
                        for b = 0: n
                            Z_3 = per(0, b, 0, n, d);
                            if Z_3 ~= "N"
                                Z_4 = split(Z_3, ",");
                                K_1 = double(Z_4(1));
                                K_2 = double(Z_4(2));
                                K_3 = double(Z_4(3));
                            end
                            for c = 0: n
                                S_1 = per(a, b, c, n, d);
                                if S_1 ~= "N"
                                    S_2 = split(S_1, ",");
                                    A = double(S_2(1));
                                    B = double(S_2(2));
                                    C = double(S_2(3));
                                    [G_2, H_2, I_2] = three_to_six(A, B, C, x, n_1, n_2, d, num, box);
                                    if Z_1 ~= "N"
                                        if ~ismember(S_1, list_l)
                                            [G_3, H_3, I_3] = three_to_six(D, G, Z, x, n_1, n_2, d, num, box);
                                            list_l = [list_l, S_1];
                                            number_s = number_s + 1;
                                            for k = 1: I_3
                                                lin_sdp{number_s, H_3(k, 1)} = lin_sdp{number_s, H_3(k, 1)} + 1;
                                            end
                                            clear k;
                                            for k = 1: I_2
                                                lin_sdp{number_s, H_2(k, 1)} = lin_sdp{number_s, H_2(k, 1)} - 1;
                                            end
                                            G_3 - G_2 >= 0;
                                            condition = [condition, G_3-G_2];
                                        end
                                        if Z_3 ~= "N"
                                            if ~ismember(S_1, list_2)
                                                [F_1, F_2, F_3] = three_to_six(K_1, K_2, K_3, x, n_1, n_2, d, num, box);
                                                list_2 = [list_2, S_1];
                                                number_s = number_s + 1;
                                                for k = 1: I_3
                                                    lin_sdp{number_s, H_3(k, 1)} = lin_sdp{number_s, H_3(k, 1)} - 1;
                                                end
                                                clear k;
                                                for k = 1: I_2
                                                    lin_sdp{number_s, H_2(k, 1)} = lin_sdp{number_s, H_2(k, 1)} + 1;
                                                end
                                                clear k
                                                for k = 1: F_3
                                                    lin_sdp{number_s, F_2(k, 1)} = lin_sdp{number_s, F_2(k, 1)} + 1;
                                                end
                                                clear k
                                                1 + G_2 - G_3 + F_1 >= 0;
                                                condition = [condition, 1 + G_2 - G_3 - F_1];
                                            end
                                        end
                                    else
                                        G_2 == 0;
                                    end
                                end
                            end
                        end
                    end

                    clear a Z_1 Z_2 D Z G A B C S_1 S_2 G_1 H_1 I_1 G_2 H_2 I_2 G_3 H_3 I_3 K_1 K_2 K_3 F_1 F_2 F_3 Z_3 Z_4;


                    %equation 25 in "New code upper bounds from the Terwilliger algebra and
                    %semidefinite programming" on (n, d).
                    if Eq_25 == 1
                        if d == 4
                            N_1 = 3;
                        end
                        if d == 6
                            N_1 = 4;
                        end
                        if d == 8
                            N_1 = 5;
                        end
                        if d == 10
                            N_1 = 6;
                        end
                        if d == 12
                            N_1 = 7;
                        end
                        if n == 4 || n == 5
                            N_2 = 3;
                        end
                        if n == 6 || n == 7
                            if d == 6
                                N_2 = 4;
                            else
                                N_2 = 3;
                            end
                        end
                        if n == 8 || n == 9
                            if d == 8
                                N_2 = 5;
                            else
                                N_2 = 4;
                            end
                        end
                        if n == 10 || n == 11
                            if d == 10
                                N_2 = 6;
                            else
                                N_2 = 5;
                            end
                        end
                        if n == 12 || n == 13
                            if d == 12
                                N_2 = 7;
                            else
                                N_2 = 6;
                            end
                        end
                        if n == 14 || n == 15
                            N_2 = 7;
                        end
                        if n == 16 || n == 17
                            N_2 = 8;
                        end
                        if n == 18 || n == 19
                            N_2 = 9;
                        end
                        if n == 20 || n == 21
                            N_2 = 10;
                        end
                        if n == 22 || n == 23
                            N_2 = 11;
                        end
                        if n == 24 || n == 25
                            N_2 = 12;
                        end
                        if n == 26 || n == 27
                            N_2 = 13;
                        end
                        if n == 28
                            N_2 = 14;
                        end
                        eq_25 = cell(14, num);
                        for i = 1: 14
                            for j = 1: num
                                eq_25{i, j} = 0;
                            end
                        end
                        clear i j;
                        for u = N_1: N_2
                            [u_1, u_2, u_3] = three_to_six(u, 0, 0, x, n_1, n_2, d, num, box);
                            Eq_25_d{1, u-N_1+1}: -comb(n, u)*u_1 + key_1(u-N_1+1)*x(1) >= 0;
                            eq_25{u-N_1+1, 1} = eq_25{u-N_1+1, 1} + key_1(u-N_1+1);
                            for i = 1: u_3
                                eq_25{u-N_1+1, u_2(i, 1)} = eq_25{u-N_1+1, u_2(i, 1)} - comb(n, u)*u_2(i, 2);
                            end
                            condition = [condition, -comb(n, u)*u_1 + key_1(u-N_1+1)*x(1)];
                        end
                        clear N_1 N_2 u_1 u u_3 u_2 i;
                    end


                    %Delsarte's bound for (n, d).
                    if LP == 1
                        L_P = cell(n+1, num);
                        for q = 1: n+1
                            for s = 1: num
                                L_P{q, s} = 0;
                            end
                        end
                        clear q s;
                        for p = 0: n
                            tot = cvx(zeros(1));
                            for l = 0: n
                                [D, D_1, D_2] = three_to_six(l, 0, 0, x, n_1, n_2, d, num, box);
                                tot = tot + comb(n, l) * krav(l, n, p) * D;
                                for i = 1: D_2
                                    L_P{p+1, D_1(i, 1)} = L_P{p+1, D_1(i, 1)} + comb(n, l) * krav(l, n, p) * D_1(i, 2);
                                end
                            end
                            LP_d{1, p+1}: tot >= 0;
                            condition = [condition, tot];
                        end
                        clear p d_1 D l tot i D_1 D_2 l_1 tot;
                    end
                    
                    %Generalize Delsarte's bound
                    if SLP == 1
                        if n_1 > 0
                            SL_P = cell((n_1+1), (n_2+1), num);
                            for p = 1: n_1+1
                                for q = 1: n_2+1
                                    for s = 1: num
                                        SL_P{p, q, s} = 0;
                                    end
                                end
                            end
                            clear q s p;
                            for p = 0: n_1
                                for q = 0: n_2
                                    tot = cvx(zeros(1));
                                    for l = 0: n_1
                                        for l_1 = 0: n_2
                                            D = per_six(0, l, 0, n_1, 0, l_1, 0, n_2, d);
                                            D_1 = sear(D, num, box);
                                            if D_1 ~= -1
                                                tot = tot + comb(n_1, l) * comb(n_2, l_1) * krav(l, n_1, p) * krav(l_1, n_2, q) * x(D_1);
                                                SL_P{p+1, q+1, D_1} = SL_P{p+1, q+1, D_1} + comb(n_1, l) * comb(n_2, l_1) * krav(l, n_1, p) * krav(l_1, n_2, q);
                                            end
                                        end
                                    end
                                    SLP_d{p+1, q+1}: tot >= 0;
                                    condition = [condition, tot];
                                    clear tot;
                                end
                            end
                            clear p d_1 D l l_1 q tot i D_1 D_2 tot;
                        end
                    end
                    
                    %doublely constant weight code
                    if Double == 1
                        dou_1 = 0;
                        d_1 = (d / 2) - 1;
                        dou_lp = cell(dou, num);
                        for i = 1: dou
                            for j = 1: num
                                dou_lp{i, j} = 0;
                            end
                        end
                        clear i j;
                        list_3 = ["0"];
                        for i = 0: n
                            for j = 0: n
                                for t = 0: n
                                    if per(i, j, t, n, d) ~= "N" && per(i, 0, 0, n, d) ~= "N"
                                        if ~ismember(string(i)+string(j)+string(t), list_3)
                                            if t*i*(j-t)*(n-i)*(i-t)*(n-i-j+t) > 0 
                                                if t >= floor(i/2)
                                                    a = i-t;
                                                else
                                                    a = t;
                                                end
                                                if j-t >= floor((n-i)/2)
                                                    b = n-i-j+t;
                                                else
                                                    b = j-t;
                                                end
                                                if T{a, i, b, n-i, d_1} ~= 0
                                                    list_3 = [list_3, string(i)+string(j)+string(t)];
                                                    dou_1 = dou_1 + 1;
                                                    [A, B, C] = three_to_six(i, j, t, x, n_1, n_2, d, num, box);
                                                    [D, E_s, F_s] = three_to_six(i, 0, 0, x, n_1, n_2, d, num, box);
                                                    Do{1, dou_1}: (T{a, i, b, n-i, d_1} / (comb(i, t)*comb(n-i, j-t))) * D - A >= 0;
                                                    condition = [condition, (T{a, i, b, n-i, d_1} / (comb(i, t)*comb(n-i, j-t))) * D - A];
                                                    for P_s = 1: C
                                                        dou_lp{dou_1, B(i, 1)} = dou_lp{dou_1, B(i, 1)} - B(i, 2);
                                                    end
                                                    for Q_s = 1: F_s
                                                        dou_lp{dou_1, E_s(i, 1)} = dou_lp{dou_1, E_s(i, 1)} + (T{a, i, b, n-i, d_1} / (comb(i, t)*comb(n-i, j-t))) * E_s(i, 2);
                                                    end
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                        clear i j t list_3 A B C D E_s F_s Q_s P_s dou_1 d_1;
                    end

                    
                        
                        


                    %Lemma 5 in "Binary Codes with a Minimum Distance of Four" for (n,
                    %d)
                    if Best == 1
                        A_1 = cvx(zeros(1));
                        le_5 = cell(1, num);
                        for i = 1: num
                            le_5{1, i} = 0;
                        end
                        clear i;
                        for g = 0: n
                            if g == n - (d/2) -2
                                [D_1, F_1, s_1] = three_to_six(g, 0, 0, x, n_1, n_2, d, num, box);
                                A_1 = A_1 + comb(n,g)*((d/2)+2)*D_1;
                                for i = 1: s_1
                                    le_5{1, F_1(i, 1)} = le_5{1, F_1(i, 1)} - comb(n,g)*((d/2)+2)*F_1(i, 2);
                                end
                                clear i F_1 s_1 D_1;
                            end
                            if g == n - (d/2)
                                [D_2, F_2, s_2] = three_to_six(g, 0, 0, x, n_1, n_2, d, num, box);
                                A_1 = A_1 + comb(n,g)*(d/2)*(P-E)*D_2;
                                for i = 1: s_2
                                    le_5{1, F_2(i, 1)} = le_5{1, F_2(i, 1)} - comb(n,g)*(d/2)*(P-E)*F_2(i, 2);
                                end
                                clear i F_2 s_2 D_2;
                            end
                            if g == n - (d/2) + 2
                               [D_3, F_3, s_3] = three_to_six(g, 0, 0, x, n_1, n_2, d, num, box);
                               A_1 = A_1 + comb(n,g)*((n*P)-(((d/2)+2)*R))*D_3;
                                for i = 1: s_3
                                    le_5{1, F_3(i, 1)} = le_5{1, F_3(i, 1)} - comb(n,g)*((n*P)-(((d/2)+2)*R))*F_3(i, 2);
                                end
                                clear i F_3 s_3D_3;
                            end       
                            if g >= n - (d/2) + 3
                                [D_4, F_4, s_4] = three_to_six(g, 0, 0, x, n_1, n_2, d, num, box);
                                A_1 = A_1 + comb(n,g)*(n*P)*D_4;
                                for i = 1: s_4
                                    le_5{1, F_4(i, 1)} = le_5{1, F_4(i, 1)} - comb(n,g)*(n*P)*F_4(i, 2);
                                end
                                clear i F_4 s_4 D_4;
                            end
                        end
                        Best_le_5_d{1, 1}: -A_1 + n*P*x(1) >= 0;
                        le_5{1, 1} = le_5{1, 1} + n*P;
                        condition = [condition, -A_1 + n*P*x(1)];
                        clear g D_1 D_2 D_3 D_4 A_1;
                    end


                    %Lemma 7 in "Binary Codes with a Minimum Distance of Four" for (n,
                    %d)
                    if Best == 1
                        le_7 = cell(n-1, num);
                        for i = 1: n-1
                            for j = 1:num
                                le_7{i, j} = 0;
                            end
                        end
                        clear i j;
                        for A_k = 1: n-1
                            A_2 = cvx(zeros(1));
                            for h = 0: n
                                [h_1, h_2, h_3] = three_to_six(h, 0, 0, x, n_1, n_2, d, num, box);
                                if A_k <= n-h
                                    A_2 = A_2 + comb(n,h)*comb(n-h, A_k)*h_1;
                                    for i = 1: h_3
                                        le_7{A_k, h_2(i, 1)} = le_7{A_k, h_2(i, 1)} - h_2(i, 2)*comb(n,h)*comb(n-h, A_k);
                                    end
                                    clear i;
                                end
                            end
                            if d == 4
                                A_2 = A_2 - comb(n, A_k)*A_4(n-A_k)*x(1);
                                le_7{A_k, 1} = le_7{A_k, 1} + comb(n, A_k)*A_4(n-A_k);
                            end
                            if d == 6
                                A_2 = A_2 - comb(n, A_k)*A_6(n-A_k)*x(1);
                                le_7{A_k, 1} = le_7{A_k, 1} + comb(n, A_k)*A_6(n-A_k);
                            end
                            if d == 8
                                A_2 = A_2 - comb(n, A_k)*A_8(n-A_k)*x(1);
                                le_7{A_k, 1} = le_7{A_k, 1} + comb(n, A_k)*A_8(n-A_k);
                            end
                            if d == 10
                                A_2 = A_2 - comb(n, A_k)*A_10(n-A_k)*x(1);
                                le_7{A_k, 1} = le_7{A_k, 1} + comb(n, A_k)*A_10(n-A_k);
                            end
                            if d == 12
                                A_2 = A_2 - comb(n, A_k)*A_12(n-A_k)*x(1);
                                le_7{A_k, 1} = le_7{A_k, 1} + comb(n, A_k)*A_12(n-A_k);
                            end
                            Best_le_7_d{1, A_k}: -A_2 >= 0;
                            condition = [condition, -A_2];
                        end
                        clear h_1 h_2 h A_k A_2;
                    end


                    %Equation 18 of theorem 7 in "Improved Semidefinite Programming
                    %Bound on Sizes of Codes" on (n, d).
                    if Eq_18 == 1
                        tot = cvx(zeros(1));
                        eq_18 = cell(1, num);
                        for i = 1: num
                            eq_18{1, i} = 0;
                        end
                        clear i j;
                        N = n - (d/2);
                        N_1 = three_to_six(N, 0, 0, x, n_1, n_2, d, num, box);
                        tot = tot + comb(n, N) * N_1;
                        for i = 0: (d/2)-1
                            [N_2, N_3, N_4] = three_to_six(n-i, 0, 0, x, n_1, n_2, d, num, box);
                            tot = tot + floor((2 * n) / d) * comb(n, n-i) * N_2;
                            for j = 1: N_4
                                eq_18{1, N_3(j, 1)} = eq_18{1, N_3(j, 1)} - floor((2 * n) / d) * comb(n, n-i) * N_3(j, 2);
                            end
                        end
                        Eq_18_d{1, 1}: -tot + floor((2 * n) / d)*x(1) >= 0;
                        eq_18{1, 1} = eq_18{1, 1} + floor((2 * n) / d);
                        condition = [condition, -tot + floor((2 * n) / d)*x(1)];
                        clear N N_1 N_2 N_3 N_4 i tot;
                    end


                    %Equation 19 of theorem 7 in "Improved Semidefinite Programming Bound on Sizes of Codes."
                    %on (n, d).
                    if Eq_19 == 1
                        if d == 4
                            L = 5;
                        end
                        if d == 6
                            L = 7;
                        end
                        if d == 8
                            L = 9;
                        end
                        if d == 10
                            L = 11;
                        end
                        if d == 12
                            L = 13;
                        end
                        eq_19 = cell(13, num);
                        for i = 1: 13
                            for j = 1: num
                                eq_19{i, j} = 0;
                            end
                        end
                        clear i j;
                        for i = 4: L
                            if mod(i, 2) == 0
                                if key(i) > 0
                                    S_1 = key(i);
                                    S_2 = key(i+1);
                                    tot_2 = cvx(zeros(1));
                                    k = (i / 2) - 1;
                                    [N, F_1, s_1] = three_to_six(n-(d/2)-k, 0, 0, x, n_1, n_2, d, num, box);
                                    tot_2 = tot_2 + comb(n, n-(d/2)-k) * N;
                                    for p = 1: s_1
                                        eq_19{i, F_1(p, 1)} = eq_19{i, F_1(p, 1)} - F_1(p, 2)*comb(n, n-(d/2)-k);
                                    end
                                    clear p;
                                    [N_2, F_2, s_2] = three_to_six(n-(d/2)+k, 0, 0, x, n_1, n_2, d, num, box);
                                    tot_2 = tot_2 + (S_1 - S_2) * comb(n, n-(d/2)+k) * N_2;
                                    for p = 1: s_2
                                        eq_19{i, F_2(p, 1)} = eq_19{i, F_2(p, 1)} - F_2(p, 2)*comb(n, n-(d/2)+k)*(S_1 - S_2);
                                    end
                                    clear p;
                                    if k < (d/2)
                                        for j = k+1: (d/2)-1
                                            [N_4, F_3, s_3] = three_to_six(n-(d/2)+j, 0, 0, x, n_1, n_2, d, num, box);
                                            tot_2 = tot_2 + S_1 * comb(n, n-(d/2)+j) * N_4;
                                            for p = 1: s_3
                                                eq_19{i, F_3(p, 1)} = eq_19{i, F_3(p, 1)} - F_3(p, 2)*comb(n, n-(d/2)+j)*S_1;
                                            end
                                            clear p;
                                        end
                                    end
                                    Eq_19_d{1, i-3}: -tot_2 + S_1*x(1) >= 0;
                                    condition = [condition, -tot_2 + S_1*x(1)];
                                    eq_19{i, 1} = eq_19{i, 1} + S_1;
                                end
                            end
                        end
                        clear i N N_1 N_2 N_3 N_4 N_5 k tot_2 S_1 S_2 L;
                    end

                cvx_end

                disp("check_promal");
                disp("matrix");
                error_mat = 0;
                if sp_sdp == 1
                    for i = 1: 2
                        for j = 1: floor(n_1/2)+1
                            for k = 1: floor(n_2/2)+1
                                Ch = eigs(matrix{i, j, k});
                                for m = Ch
                                    if m <= 0
                                        error_mat = error_mat + m(1);
                                    end
                                end
                            end
                        end
                    end
                    clear i j k m Ch;
                end
                if sdp == 1
                    for i = 1: 2
                        for j = 1: floor(n/2)+1
                            Ch = eigs(matrix_sdp{i, j});
                            for m = Ch
                                if m <= 0
                                    error_mat = error_mat + m(1);
                                end
                            end
                        end
                    end
                    clear i j k m Ch;
                end
                disp(error_mat);
                disp("condition");
                error_prim = 0;
                for i = condition
                    if i < 0
                        error_prim = error_prim - i;
                    end
                end
                clear i;
                disp(error_prim);
                disp("check_dual");
                error = 0;
                for i = 1: num
                    clear tot;
                    tot = 0;
                    if sdp == 1
                        for j = 1: 2
                            for k = init_sdp: floor(n/2)
                                tot = tot + trace(transpose(matrix_d_sdp{j, k+1})*F_sdp{j, k+1}{1, i});
                            end
                        end
                        clear j k t;
                    end
                    if sp_sdp == 1
                        for j = 1: 2
                            for k = init_3: floor(n_1/2)
                                for t = init_4: floor(n_2/2)
                                    if ~ismember(string(k)+","+string(t), forbidden_2)
                                        tot = tot + trace(transpose(matrix_d{j, k+1, t+1})*F{j, k+1, t+1}{1, i});
                                    end
                                end
                            end
                        end
                        clear j k t;
                    end
                    for j = 1: numbers
                        if sdp_lin_d{1, j}*lin{j, i} ~= []
                            tot = tot + sdp_lin_d{1, j}*lin{j, i};
                        end
                    end
                    clear j;
                    for j = 1: number_sdp
                        if sdp_lin{1, j}*lin_sdp{j, i} ~= []
                            tot = tot + sdp_lin{1, j}*lin_sdp{j, i};
                        end
                    end
                    clear j;
                    if SLP == 1
                        if n_1 >= 1
                            for j = 1: n_1+1
                                for j_1 = 1: n_2+1
                                    if SLP_d{j, j_1}*SL_P{j, j_1, i} ~= []
                                        tot = tot + SLP_d{j, j_1}*SL_P{j, j_1, i};
                                    end
                                end
                            end
                        end
                        clear j j_1
                    end
                    if Double == 1
                        for j = 1: dou
                            if dou_lp{j, i}*Do{1, j} ~= []
                                tot = tot + dou_lp{j, i}*Do{1, j};
                            end
                        end
                        clear j;
                    end
                    if Eq_25 == 1
                        for j = 1: 14
                            if eq_25{j, i}*Eq_25_d{1, j} ~= []
                                tot = tot + eq_25{j, i}*Eq_25_d{1, j};
                            end
                        end
                        clear j
                    end
                    if Best == 1
                        tot = tot + Best_le_5_d{1, 1}*le_5{1, i};
                        for j = 1: n-1
                            if Best_le_7_d{1, j}*le_7{1, i} ~= []
                                tot = tot + Best_le_7_d{1, j}*le_7{1, i};
                            end
                        end
                        clear j
                    end
                    if Eq_18 == 1
                        tot = tot + Eq_18_d{1, 1}*eq_18{1, i};
                    end
                    if Eq_19 == 1
                        for j = 1: 13
                            if Eq_19_d{1, j}*eq_19{j, i} ~= []
                                tot = tot + Eq_19_d{1, j}*eq_19{j, i};
                            end
                        end
                        clear j
                    end
                    if LP == 1
                        for j = 1: n+1
                            if L_P{j, i}*LP_d{1, j} ~= []
                                tot = tot + L_P{j, i}*LP_d{1, j};
                            end
                        end
                        clear j k a A;
                    end
                    if i > 1
                        check = 0;
                        for j = 0: n_1
                            for k = 0: n_2
                                if mod(j+k, 2) == 0
                                    a = per_six(0, j, 0, n_1, 0, k, 0, n_2, d);
                                    A = sear(a, num, box);
                                    if A == i
                                        if check == 0
                                            check = 1;
                                            if tot - comb(n_1, j)*comb(n_2, k)*order_obj > 0
                                                error = error + (tot - comb(n_1, j)*comb(n_2, k)*order_obj);
                                            end
                                        end
                                    end
                                end
                            end
                        end
                        if check == 0
                            if tot > 0
                                error = error + tot;
                            end
                        end
                    end
                end
                clear i j k a A check tot;
                disp(error);
                check_lp = 1;
                if LP == 0
                    clear q s;
                    for p = 0: n
                        tot = 0;
                        for l = 0: n
                            [D, D_1, D_2] = three_to_six(l, 0, 0, x, n_1, n_2, d, num, box);
                            tot = tot + comb(n, l) * krav(l, n, p) * D;
                        end
                        if tot < 0
                            check_lp = 0;
                        end
                    end
                    clear p d_1 D l tot i D_1 D_2 l_1 tot;
                end
                if (error_prim < 10^(-6)) && (error_mat < 10^(-6))
                    if cvx_status == "Solved" && check_lp == 1
                        value = [value, cvx_optval];
                        error_list = [error_list, error];
                        upper_bound = [upper_bound, cvx_optval + error];
                    end
                    if cvx_status == "Inaccurate/Solved" && check_lp == 1
                        value = [value, cvx_optval];
                        error_list = [error_list, error];
                        upper_bound = [upper_bound, cvx_optval + error];
                    end
                end
            end
            part = [];
            part_b = [];
            for k = 1: length(value)
                if value(k) == min(value)
                    part = [part, k-1];
                end
                if upper_bound(k) == min(upper_bound)
                    part_b = [part_b, k-1];
                end
            end
            res{(d/2)-1, n} = [min(value), min(part), min(upper_bound), min(part_b), error_list(k)];
            clear k;
        end
    end
end

for i = 1: 5
    for j = start_n: end_n
        if j >= 2*i + 2
            disp("("+string(j)+","+string((i+1)*2)+")");
            disp("opimal value: "+string(res{i, j}(1)));
            disp("n_1: "+string(res{i, j}(2)));
            disp("upper_bound: "+string(res{i, j}(3)));
            disp("n_1: "+string(res{i, j}(4)));
            disp("error: "+string(res{i, j}(5)));
        end
    end
end





function A = krav(x, n, k)
    ans = 0;
    for j = 0: k
        ans = ans + (((-1)^j))*comb(x,j)*comb(n-x, k-j);
    end
    A = ans;
end

function O = sear(it, num, box)
    P = -1;
    if it == "N"
        P = -1;
    else
        for i = 1: num
            if string(it) == box(i)
                P = i;
            end
        end
    end
    O = P;
end

function [O, D] = num_var(n_1, n_2, d)
    tot = ['[0,0,0][0,0,0]'];
    for i_1 = 0: n_1
        for j_1 = 0: n_1
            for t_1 = 0: n_1
                for i_2 = 0: n_2
                    for j_2 = 0: n_2
                        for t_2 = 0: n_2
                            B = per_six(i_1, j_1, t_1, n_1, i_2, j_2, t_2, n_2, d);
                            if B ~= "N"
                                if ~ismember(B, tot)
                                    tot = [tot, B];
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    C = size(tot);
    O = C(1, 2);
    D = tot;
end

function Z = per_six(i_1, j_1, t_1, n_1, i_2, j_2, t_2, n_2, d)
    Q = "1";
    a = i_1+i_2;
    b = j_1+j_2;
    c = t_1+t_2;
    if d > 1
        if mod(d, 2) == 0
            if mod(a, 2) == 1 || mod(b, 2) == 1 || mod(a+b-2*c, 2) == 1
                Q = "N";
            end
        end
        if a > 0 && a < d
            Q = "N";
        end
        if b > 0 && b < d
            Q = "N";
        end
        if a+b-2*c > 0 && a+b-2*c < d
            Q = "N";
        end
        if a+b-c > n_1+n_2 || a+b-c < 0
            Q = "N";
        end
        if a+b-2*c < 0 || a+b-2*c > n_1 + n_2
            Q = "N";
        end
    end
    if i_1 - t_1 < 0 || j_1 - t_1 < 0 || i_2 - t_2 < 0 || j_2 - t_2 < 0
        Q = "N";
    end
    if i_1+j_1-2*t_1 < 0 || i_1+j_1-2*t_1 > n_1 || i_2+j_2-2*t_2 < 0 || i_2+j_2-2*t_2 > n_2
        Q = "N";
    end
    if i_1+j_1-t_1 < 0 || i_1+j_1-t_1 > n_1 || i_2+j_2-t_2 < 0 || i_2+j_2-t_2 > n_2
        Q = "N";
    end
    if i_1 == 0 && j_1 == 0 && t_1 == 0
        A = per(i_2, j_2, t_2, n_2, d);
        if Q == "1"
            Q = "[0,0,0]["+A+"]";
        end
    end
    if i_2 == 0 && j_2 == 0 && t_2 == 0
        A = per(i_1, j_1, t_1, n_1, d);
        if Q == "1"
            Q = "["+A+"][0,0,0]";
        end
    end
    if Q == "1"
        if per(i_1, j_1, t_1, n_1, 0) ~= "N" && per(i_2, j_2, t_2, n_2, 0) ~= "N"
            %Q = '['+string(i_1)+','+string(j_1)+','+string(t_1)+']['+string(i_2)+','+string(j_2)+','+string(t_2)+']';
            V_2 = perms([i_2 j_2 i_2+j_2-2*t_2]);
            a = [];
            item = 0;
            for p = 1: 6
                vector = V_2(p, :);
                m = vector(1, 1);
                l = vector(1, 2);
                k = ((vector(1, 3) - m - l) / (-2)) ;
                check_1 = 0: n_2;
                if (ismember(k, check_1) && (ismember(m, check_1) && ismember(l, check_1)))
                    item = item + 1;
                    a = [a; [m, l, k]];
                end
            end
            if item == 1
                [A, B, C] = a;
            end
            first = [];
            for q = 1: item
                first = [first, a(q, 1)];
            end
            one = min(first);
            f = [];
            f_num = 0;
            second = [];
            for r = 1: item
                if a(r, 1) == one
                    f = [f; a(r, :)];
                    f_num = f_num + 1;
                    second = [second, a(r, 2)];
                end
            end
            if f_num == 1
                A = f(1);
                B = f(2);
                C = f(3);
            end
            two = min(second);
            g = [];
            g_num = 0;
            third = [];
            for s = 1: f_num
                if f(s, 2) == two
                    g_num = g_num + 1;
                    g = [g; f(s, :)];
                    third = [third, f(s, 3)];
                end
            end
            if g_num == 1
                A = g(1);
                B = g(2);
                C = g(3);
            end
            three = min(third);
            h = [];
            h_num = 0;
            for l = 1: g_num
                if f(l, 3) == three
                    h = f(l, :);
                    h_num = 1;
                end
            end
            if h_num == 1
                A = h(1);
                B = h(2);
                C = h(3);
            end
            check = 0;
            for p = 1: 6
                vector = V_2(p, :);
                m = vector(1, 1);
                l = vector(1, 2);
                k = ((vector(1, 3) - m - l) / (-2)) ;
                if m == A && l == B && k == C
                    if check == 0
                        check = p;
                    end
                end
            end
            V_1 = perms([i_1 j_1 i_1+j_1-2*t_1]);
            for q = 1: 6
                if q == check
                    target = V_1(q, :);
                    D = target(1, 1);
                    E = target(1, 2);
                    F = (target(1, 3)-D-E) / (-2);
                end
            end
            Q = '['+string(A)+','+string(B)+','+string(C)+']['+string(D)+','+string(E)+','+string(F)+']';
        else
            Q = "N";
        end
    end
    Z = Q;
end

function Y = per(i, j, t, n, d)
    O = "1";
    if i >= 1 && i < d
        O = "N";
    end
    if j >= 1 && j < d
        O = "N";
    end
    if i+j-2*t > 0 && i+j-2*t < d
        O = "N";
    end
    if i-t < 0 || j-t < 0 || i+j-2*t < 0 || i+j-2*t > n
        O = "N";
    end
    if i+j-t < 0 || i+j-t > n
        O = "N";
    end
    V = perms([i j i+j-2*t]);
    a = [];
    item = 0;
    for p = 1: 6
        vector = V(p, :);
        m = vector(1, 1);
        l = vector(1, 2);
        k = ((vector(1, 3) - m - l) / (-2)) ;
        check_1 = 0: n;
        if (ismember(k, check_1) && (ismember(m, check_1) && ismember(l, check_1)))
            item = item + 1;
            a = [a; [m, l, k]];
        end
    end
    if item == 1
        [A, B, C] = a;
    end
    first = [];
    for q = 1: item
        first = [first, a(q, 1)];
    end
    one = min(first);
    f = [];
    f_num = 0;
    second = [];
    for r = 1: item
        if a(r, 1) == one
            f = [f; a(r, :)];
            f_num = f_num + 1;
            second = [second, a(r, 2)];
        end
    end
    if f_num == 1
        A = f(1);
        B = f(2);
        C = f(3);
    end
    two = min(second);
    g = [];
    g_num = 0;
    third = [];
    for s = 1: f_num
        if f(s, 2) == two
            g_num = g_num + 1;
            g = [g; f(s, :)];
            third = [third, f(s, 3)];
        end
    end
    if g_num == 1
        A = g(1);
        B = g(2);
        C = g(3);
    end
    three = min(third);
    h = [];
    h_num = 0;
    for l = 1: g_num
        if f(l, 3) == three
            h = f(l, :);
            h_num = 1;
        end
    end
    if h_num == 1
        A = h(1);
        B = h(2);
        C = h(3);
    end
    if O == "1"
        O = string(A)+',' +string(B) +','+string(C);
    end
    Y = O;
end

function [Y, F, size] = three_to_six(a, b, c, x, n_1, n_2, d, num, box)
    Q = "1";
    F = [];
    size = 0;
    ans = 0;
    if mod(a, 2) == 1 || mod(b, 2) == 1 || mod(a+b-2*c, 2) == 1
        Q = "N";
    end
    S_1 = per(a, b, c, n_1+n_2, d);
    if S_1 == "N"
        Q = "N";
    end
    if Q ~= "N"
        A = a;
        B = b;
        C = c;
        for i_1 = 0: n_1
            for j_1 = 0: n_1
                for t_1 = 0: n_1
                    for i_2 = 0: n_2
                        for j_2 = 0: n_2
                            for t_2 = 0: n_2
                                if i_1+i_2 == A && j_1+j_2 == B && t_1+t_2 == C
                                    a_1 = per_six(i_1, j_1, t_1, n_1, i_2, j_2, t_2, n_2, d);
                                    A_1 = sear(a_1, num, box);
                                    if A_1 ~= -1
                                        const_1 = comb_num_lam(i_1, j_1, t_1, n_1)*comb_num_lam(i_2, j_2, t_2, n_2);
                                        const_2 = comb_num_lam(A, B, C, n_1+n_2);
                                        if const_2 ~= 0
                                            ans = ans + (const_1 / const_2)*x(A_1);
                                            F = [F; A_1, (const_1 / const_2)];
                                            size = size + 1;
                                        end
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
    Y = ans;
end

function B = comb_num(i, j, t, k, n)
    ans = 0;
    for u = 0:n
        ans = ans + ((-1)^(u-t))*comb(u,t)*comb(n-2*k,u-k)*comb(n-k-u,i-u)*comb(n-k-u,j-u);
    end
    B = ans;
end

function A = comb(a, b)
    ans = 0;
    if a >= 0 && b >= 0 && b <= a
        ans = nchoosek(a, b);
    end
    A = ans;
end

function A = comb_num_lam(i, j, t, n)
    B = 0;
    if i-t >= 0 && i-t <= n
        if j-t >= 0 && j-t <= n
            if t >= 0 && t <= n
                if n-i-j+t >= 0 && n-i-j+t <= n
                    B = (factorial(n) / (factorial(i-t)*factorial(j-t)*factorial(t)*factorial(n-i-j+t)));
                end
            end
        end
    end
    A = B;
end

function N = order_pair(i, j, num, box)
    C = 0;
    for D = 1: num
        if box(D) == "("+string(i)+", "+string(j)+")"
            C = D;
        end
    end
    N = C;
end

 

function [matrix_1, matrix_2, F_1, F_2] = generate_1(x, n_1, n_2, k_1, k_2, num, box, d, num_bi, text, order)
    N = (n_1-2*k_1+1)*(n_2-2*k_2+1);
    goal_1 = cvx(zeros(N, N));
    goal_2 = cvx(zeros(N, N));
    F_1 = cell(1, num);
    F_2 = cell(1, num);
    for f = 1: num
        F_1{1, f} = zeros(N, N);
        F_2{1, f} = zeros(N, N);
    end
    for i_1 = k_1: n_1-k_1
        for j_1 = k_1: n_1-k_1
            for i_2 = k_2: n_2-k_2
                for j_2 = k_2: n_2-k_2
                    a = cvx(zeros(1));
                    b = cvx(zeros(1));
                    const = comb(n_1-2*k_1, i_1-k_1)*comb(n_1-2*k_1, j_1-k_1)*comb(n_2-2*k_2, i_2-k_2)*comb(n_2-2*k_2, j_2-k_2);
                    i = order_pair(i_1-k_1+1, i_2-k_2+1, num_bi, text);
                    j = order_pair(j_1-k_1+1, j_2-k_2+1, num_bi, text);
                    for t_1 = 0: n_1
                        for t_2 = 0: n_2
                            a_1 = per_six(i_1, j_1, t_1, n_1, i_2, j_2, t_2, n_2, d);
                            A = sear(a_1, num, box);
                            if A ~= -1
                                a = a + comb_num(i_1, j_1, t_1, k_1, n_1)*comb_num(i_2, j_2, t_2, k_2, n_2)*x(A);  
                                F_1{1, A}(i, j) = F_1{1, A}(i, j) + (comb_num(i_1, j_1, t_1, k_1, n_1)*comb_num(i_2, j_2, t_2, k_2, n_2) * order / const^(1/2));
                                F_2{1, A}(i, j) = F_2{1, A}(i, j) - (comb_num(i_1, j_1, t_1, k_1, n_1)*comb_num(i_2, j_2, t_2, k_2, n_2) * order / const^(1/2));
                            end
                            if i_1+j_1-2*t_1 >= 0 && i_1+j_1-2*t_1 <= n_1 && i_2+j_2-2*t_2 >= 0 && i_2+j_2-2*t_2 <= n_2
                                b_1 = per_six(i_1+j_1-2*t_1, 0, 0, n_1, i_2+j_2-2*t_2, 0, 0, n_2, d);
                                B = sear(b_1, num, box);
                                if B ~= -1
                                    b = b + comb_num(i_1, j_1, t_1, k_1, n_1)*comb_num(i_2, j_2, t_2, k_2, n_2)*x(B);
                                    F_2{1, B}(i, j) = F_2{1, B}(i, j) + comb_num(i_1, j_1, t_1, k_1, n_1)*comb_num(i_2, j_2, t_2, k_2, n_2) * order / const^(1/2);
                                end
                            end
                        end
                    end
                    goal_1(i, j) = (a * order / const^(1/2));
                    goal_2(i, j) = (b * order/ const^(1/2));
                end
            end
        end
    end
    matrix_1 = goal_1;
    matrix_2 = goal_2;
end
 

                           

function [matrix_1, matrix_2, F_1, F_2] = generate(x, n_1, n_2, d, k, num, box, order_sdp)
    n = n_1 + n_2;
    goal_1 = cvx(zeros(n-2*k+1, n-2*k+1));
    goal_2 = cvx(zeros(n-2*k+1, n-2*k+1));
    N = n-2*k+1;
    F_1 = cell(1, num);
    F_2 = cell(1, num);
    for f = 1: num
        F_1{1, f} = zeros(N, N);
        F_2{1, f} = zeros(N, N);
    end
    for i = k: n-k
        for j = k: n-k
            a = 0;
            b = 0;
            const = (comb(n-2*k, i-k)*comb(n-2*k, j-k))^(1/2);
            for t = 0:n
                [A, F_3, s_1] = three_to_six(i, j, t, x, n_1, n_2, d, num, box);
                a = a + comb_num(i, j, t, k, n) * A;  
                for m = 1: s_1
                    F_1{1, F_3(m, 1)}(i-k+1, j-k+1) = F_1{1, F_3(m, 1)}(i-k+1, j-k+1) + F_3(m, 2)*comb_num(i, j, t, k, n) * order_sdp / const;
                    F_2{1, F_3(m, 1)}(i-k+1, j-k+1) = F_2{1, F_3(m, 1)}(i-k+1, j-k+1) - F_3(m, 2)*comb_num(i, j, t, k, n) * order_sdp / const;
                end
                if i+j-2*t >= 0 && i + j - 2*t <= n
                    [B, F_4, s_2] = three_to_six(i+j-2*t, 0, 0, x, n_1, n_2, d, num, box);
                    b = b + comb_num(i, j, t, k, n) * B;
                    for m_2 = 1: s_2
                        F_2{1, F_4(m_2, 1)}(i-k+1, j-k+1) = F_2{1, F_4(m_2, 1)}(i-k+1, j-k+1) + F_4(m_2, 2)*comb_num(i, j, t, k, n) * order_sdp / const;
                    end
                end
            end
            goal_1(i-k+1, j-k+1) = a * order_sdp / const;
            goal_2(i-k+1, j-k+1) = b * order_sdp / const;
        end
    end
    matrix_1 = goal_1;
    matrix_2 = goal_2;
 end